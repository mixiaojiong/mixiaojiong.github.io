<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Persistence</title>
    <link>http://xiaojiong.net/tags/redis/index.xml</link>
    <description>Recent content on Persistence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Xiaojiong</copyright>
    <atom:link href="http://xiaojiong.net/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>redis&#43;lua实现发号器</title>
      <link>http://xiaojiong.net/2016/01/25/redis-lua%E5%AE%9E%E7%8E%B0%E5%8F%91%E5%8F%B7%E5%99%A8/</link>
      <pubDate>Mon, 25 Jan 2016 21:58:21 +0800</pubDate>
      
      <guid>http://xiaojiong.net/2016/01/25/redis-lua%E5%AE%9E%E7%8E%B0%E5%8F%91%E5%8F%B7%E5%99%A8/</guid>
      <description>

&lt;h3 id=&#34;业务场景&#34;&gt;业务场景&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;拿微博举例：发布微博以后会产生(微博id)，而像微博这样庞大的系统你刚刚发布的微博很可能没有落地。这时你的粉丝看见了你的微博进行评论，需要一个唯一标识（微博id)与评论进行关联。&lt;/li&gt;
&lt;li&gt;你的主键是需要有意义的，比如你的分表是按日期划分，那么你的主键可能需要是这样的：2015121200000009。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;设计方案&#34;&gt;设计方案&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;号码设计：采用52位二进制数，其中高28位为秒级时间戳，接下来的4位做业务区分，再接下来的4位做随机值（一会说为什么）。最后16位为自增主键。也就说每秒可以产生65535个唯一ID。&lt;/li&gt;
&lt;li&gt;采用redis+lua的设计方案，不需要持久化。只需要cache，因为redis不具有计算能力，需要结合lua脚本的计算能力。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;问题&#34;&gt;问题&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如果某一秒钟已经发出1000个号码，但是这一秒服务重启了（很可能宕机以后立即重启，一瞬间），那么会导致这1000个号码会重复发放。&lt;/li&gt;
&lt;li&gt;此服务是单点的。&lt;/li&gt;
&lt;li&gt;phpredis扩展有整型溢出的bug&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解决方案&#34;&gt;解决方案&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;四位随机数会解决服务重启以后发送重复号码的概率。&lt;/li&gt;
&lt;li&gt;两台机器，一台发奇数，一台偶数。HA可以做轮询。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.xiaojiong.net/2016/01/13/phpredis%E6%89%A9%E5%B1%95%E4%BF%AE%E5%A4%8D%E8%AE%B0/&#34;&gt;phpredis扩展修复记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;相关代码&#34;&gt;相关代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-- biz 01 - 15
local biz = tonumber(KEYS[1])
-- random 01 - 15
local random = tonumber(KEYS[2])
-- id 16位
local id = redis.call(&amp;quot;INCRBY&amp;quot;, &amp;quot;impulse&amp;quot;, 2)
if (id) then
    -- max odd
    if (id &amp;gt;= 65535 and (id % 2 == 1)) then
        redis.call(&amp;quot;SET&amp;quot;, &amp;quot;impulse&amp;quot;, -1)
    end
    -- max even number
    if (id &amp;gt;= 65534 and (id %2 == 0)) then
        redis.call(&amp;quot;SET&amp;quot;, &amp;quot;impulse&amp;quot;, 0)
    end
else
    redis.log(redis.LOG_NOTICE, &amp;quot;impulse id false&amp;quot;)
    return false
end
id = id % 65536
-- sec 10位
local sec = redis.call(&amp;quot;TIME&amp;quot;)[1]
if (sec) then
    sec = sec - 1420041600
else 
    redis.log(redis.LOG_NOTICE, &amp;quot;impulse sec false&amp;quot;)
    return false
end
return sec*16777216 + biz*1048576 + random*65536 + id
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;参考资料&#34;&gt;参考资料&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://ericliang.info/what-kind-of-id-generator-we-need-in-business-systems/&#34;&gt;业务系统需要什么样的ID生成器&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>