<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Persistence</title>
    <link>http://www.xiaojiong.net/tags/mysql/index.xml</link>
    <description>Recent content on Persistence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Xiaojiong</copyright>
    <atom:link href="http://www.xiaojiong.net/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>mysql 聚簇索引</title>
      <link>http://www.xiaojiong.net/2016/04/15/mysql-%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Fri, 15 Apr 2016 05:21:44 +0800</pubDate>
      
      <guid>http://www.xiaojiong.net/2016/04/15/mysql-%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95/</guid>
      <description>

&lt;h3 id=&#34;一-什么是聚簇索引&#34;&gt;一、什么是聚簇索引？&lt;/h3&gt;

&lt;p&gt;百科定义：聚簇索引也叫簇类索引，是一种对磁盘上实际数据重新组织以按指定的一个或多个列的值排序。由于聚簇索引的索引页面指针指向数据页面，所以使用聚簇索引查找数据几乎总是比使用非聚簇索引快。每张表只能建一个聚簇索引，并且建聚簇索引需要至少相当该表120%的附加空间，以存放该表的副本和索引中间页。&lt;/p&gt;

&lt;h3 id=&#34;二-特点&#34;&gt;二、特点：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;聚簇索引确定表中数据的物理顺序&lt;/li&gt;
&lt;li&gt;一个表只能包含一个聚簇索引&lt;/li&gt;
&lt;li&gt;聚簇索引对于那些经常要搜索范围值的列特别有效（数据在物理上是顺序的）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;三-组织形式&#34;&gt;三、组织形式&lt;/h3&gt;

&lt;p&gt;聚簇索引是一种数据存储方式，它实际上是在同一个结构中保存了B+树索引和数据行，InnoDB表是按照聚簇索引组织的。InnoDB通过主键聚簇数据，如果没有定义主键，会选择一个唯一的非空索引代替，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ww3.sinaimg.cn/large/68faff51jw1f2w8ellxmjj20jc0gnwfg.jpg&#34; alt=&#34;组织结构图&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;四-缺点&#34;&gt;四、缺点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;插入速度严重依赖于插入顺序，按照主键的顺序插入到数据表中速度是最快的。&lt;/li&gt;
&lt;li&gt;更新聚簇索引列的代价很高，因为需要移动新的数据。&lt;/li&gt;
&lt;li&gt;在插入新行，或者主键更新需要移动行的时候，可能导致页分裂，从而导致占用更多的磁盘空间。&lt;/li&gt;
&lt;li&gt;二级索引（非聚簇）可能比想象的要大，因为二级索引的叶子节点中包含了引用行的主键列。&lt;/li&gt;
&lt;li&gt;二级索引访问需要2次索引查找，而不是一次，因为二级索引保存的不是行的物理位置，而是主键值。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>mysql 多版本并发控制协议（MVCC）</title>
      <link>http://www.xiaojiong.net/2016/04/13/mysql-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AEmvcc/</link>
      <pubDate>Wed, 13 Apr 2016 05:16:55 +0800</pubDate>
      
      <guid>http://www.xiaojiong.net/2016/04/13/mysql-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AEmvcc/</guid>
      <description>

&lt;h3 id=&#34;一-什么是mvcc&#34;&gt;一、什么是MVCC&lt;/h3&gt;

&lt;p&gt;Multi-Version Concurrency Control 多版本并发控制&lt;/p&gt;

&lt;h3 id=&#34;二-mvcc有什么用&#34;&gt;二、MVCC有什么用？&lt;/h3&gt;

&lt;p&gt;在关系型数据库中行锁与行的多个版本结合起来，只需要很小的开销,就可以实现非锁定读，从而大大提高数据库系统的并发性能&lt;/p&gt;

&lt;h3 id=&#34;三-书上说&#34;&gt;三、书上说&lt;/h3&gt;

&lt;p&gt;高性能mysql第三版：innodb 中每一行有两个隐藏字段。分别为创建版本号和删除版本号，一般用事务ID来进行标识。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;select: 读取创建版本号 &amp;lt;= 当前事务版本号，删除版本号为空或 &amp;gt; 当前事务版本号&lt;/li&gt;
&lt;li&gt;insert: 保存当前事务版本号作为创建版本号&lt;/li&gt;
&lt;li&gt;delete: 保存当前事务版本号作为删除版本号&lt;/li&gt;
&lt;li&gt;update: 插入一条新纪录，保存当前事务版本号作为创建版本号；同时保存当前事务版本号为修改前记录的删除版本号。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;四-深入些&#34;&gt;四、深入些&lt;/h3&gt;

&lt;p&gt;每一行的隐藏字段不是两个而是四个：DATA_TRX_ID，DATA_ROLL_PTR，DB_ROW_ID，DELETE BIT。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;6字节的DATA_TRX_ID 标记了最新更新这条行记录的transaction id，每处理一个事务，其值自动+1&lt;/li&gt;
&lt;li&gt;7字节的DATA_ROLL_PTR 指向当前记录项的rollback segment的undo log记录，找之前版本的数据就是通过这个指针&lt;/li&gt;
&lt;li&gt;6字节的DB_ROW_ID，当由innodb自动产生聚集索引时，聚集索引包括这个DB_ROW_ID的值，否则聚集索引中不包括这个值.，这个用于索引当中&lt;/li&gt;
&lt;li&gt;DELETE BIT位用于标识该记录是否被删除，这里的不是真正的删除数据，而是标志出来的删除。真正意义的删除是在commit的时候&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在一个sql进行查询时，读取到一行数据的DB_TRX_ID值和自己事物ID的对比，假如隔离级别为MySQL的默认级别，就只读取该ID值小于本身事物ID的数据，其余数据就需要通过DB_ROLL_PTR的信息到回滚段中读取。MVCC是否起到相应的作用需取决于数据库隔离级别的配置。&lt;/p&gt;

&lt;p&gt;在insert和update、delete的操作是有区别的，一个insert语句插入数据再rollback就是直接对undo log的删除，因为他并不会影响其他事物的读取操作，而update、delete操作是在原有数据做更改，可能有其他事物在对该行数据做读取操作，所以update、delete产生的undo log数据是由内部线程自动清理，在该数据无任何事务在使用时清理掉，所以在undo log中insert和update、delete产生的数据存于不同位置。&lt;/p&gt;

&lt;p&gt;上面说了数据的update、delete、insert操作，都会根据主键上的隐藏列来判断和查找，但是二级索引并不存在隐藏列，二级索引就是有索引列和主键列组成的一个小表，这该怎么判断呢？二级索引区别在于假如是一个update操作步骤为：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;标记删除原纪录&lt;/li&gt;
&lt;li&gt;插入新纪录&lt;/li&gt;
&lt;li&gt;对应主键做上面的隐藏字段修改，行数据更新，原行数据移入回滚段&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一个查询语句在利用二级索引进行查找时，发现有个标记删除或者有新数据就会到主键扫描对应的DB_TRX_ID值对比当前事物ID大小，是否利用DB_ROLL_PTR进行读取数据。二级索引的delete、insert也是类似，只是一个没有新纪录，一个没有标记删除记录。&lt;/p&gt;

&lt;h3 id=&#34;五-问题&#34;&gt;五、问题&lt;/h3&gt;

&lt;p&gt;既然知道mysql的每一行中存在记录的版本号，那可不可以通过版本号查询mysql某一行的历史记录呢？&lt;/p&gt;

&lt;p&gt;答案是no,不过oracle有flashback可以实现。我的理解是oracle的undo log做的更出色一些吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mysql的事务隔离级别</title>
      <link>http://www.xiaojiong.net/2016/03/30/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link>
      <pubDate>Wed, 30 Mar 2016 05:10:36 +0800</pubDate>
      
      <guid>http://www.xiaojiong.net/2016/03/30/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid>
      <description>

&lt;h3 id=&#34;事务的特性-acid&#34;&gt;事务的特性（ACID）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;原子性（atomicity）：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。&lt;/li&gt;
&lt;li&gt;一致性（consistency）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。&lt;/li&gt;
&lt;li&gt;隔离性（isolation）：当两个或者多个事务并发访问（此处访问指查询和修改的操作）数据库的同一数据时所表现出的相互关系。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。&lt;/li&gt;
&lt;li&gt;持久性（durability）：在事务完成以后，该事务对数据库所作的更改便持久地保存在数据库之中，并且是完全的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;事务的隔离级别-isolation-level&#34;&gt;事务的隔离级别（Isolation Level）&lt;/h3&gt;

&lt;p&gt;为解决脏读、幻读、不可重复读，引入如下4种事务隔离级别：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;读未提交（Read Uncommitted）&lt;/li&gt;
&lt;li&gt;读已提交（Read Committed）&lt;/li&gt;
&lt;li&gt;可重复读（Repeatabel Read）&lt;/li&gt;
&lt;li&gt;串行化读（Serializable）&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;隔离级别&lt;/th&gt;
&lt;th&gt;脏读&lt;/th&gt;
&lt;th&gt;不可重复读&lt;/th&gt;
&lt;th&gt;幻读&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;读未提交（基本不用）&lt;/td&gt;
&lt;td&gt;允许&lt;/td&gt;
&lt;td&gt;允许&lt;/td&gt;
&lt;td&gt;允许&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;读已提交&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;td&gt;允许&lt;/td&gt;
&lt;td&gt;允许&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;可重复读（默认）&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;串行化读（基本不用）&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;脏读（dirty read）：一个事务读取到了另一个事务未提交的数据操作结果。&lt;/li&gt;
&lt;li&gt;不可重复读（unrepeatable read）：事务T1读取某一数据，事务T2读取并修改了该数据，T1为了对读取值进行检验而再次读取该数据，便得到了不同的结果。&lt;/li&gt;
&lt;li&gt;幻读（phantom read）：幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;update影响不可重复读;insert或delete影响幻读&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;注意&#34;&gt;注意&lt;/h3&gt;

&lt;p&gt;Repeatabel Read在其他数据库中并不能解决幻读问题，mysql/InnoDB通过Next-Key Lock机制实现。不过mysql并不能完全保证幻读，需要自己手动加锁实现。&lt;/p&gt;

&lt;p&gt;举例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show create table rr\G;
*************************** 1. row ***************************
       Table: rr
Create Table: CREATE TABLE `rr` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `value` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8
1 row in set (0.00 sec)
//查看当前隔离级别
mysql&amp;gt; select @@tx_isolation;
+-----------------+
| @@tx_isolation  |
+-----------------+
| REPEATABLE-READ |
+-----------------+
1 row in set (0.00 sec)
//开始实验
session1                                session2
begin;                                    begin;
select * from rr;
Empty set (0.00 sec)
                                        insert into rr values(1, &#39;haha&#39;);
select * from rr;
Empty set (0.00 sec)
                                        commit;
select * from rr;
Empty set (0.00 sec)

insert into rr values(1, &#39;haha&#39;);
ERROR 1062 (23000): Duplicate entry &#39;1&#39; for key &#39;PRIMARY&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;幻读出现，MySQL InnoDB的可重复读并不保证避免幻读，需要应用使用加锁读来保证。而这个加锁度使用到的机制就是next-key locks。不过不建议使用加锁实现，会有性能问题。应该从应用层设计方面改善。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mysql Explain 详解</title>
      <link>http://www.xiaojiong.net/2016/03/12/mysql-explain-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 12 Mar 2016 04:51:22 +0800</pubDate>
      
      <guid>http://www.xiaojiong.net/2016/03/12/mysql-explain-%E8%AF%A6%E8%A7%A3/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://launchpad.net/test-db/employees-db-1/1.0.6/+download/employees_db-full-1.0.6.tar.bz2&#34;&gt;示例数据库下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;示例查询：&lt;/p&gt;

&lt;p&gt;query1：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; EXPLAIN SELECT * FROM employees\G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: employees
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 299512
        Extra: NULL
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;query2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; EXPLAIN SELECT (SELECT emp_no FROM salaries LIMIT 1) FROM employees\G;
*************************** 1. row ***************************
           id: 1
  select_type: PRIMARY
        table: employees
         type: index
possible_keys: NULL
          key: first_name_last_name
      key_len: 94
          ref: NULL
         rows: 299512
        Extra: Using index
*************************** 2. row ***************************
           id: 2
  select_type: SUBQUERY
        table: salaries
         type: index
possible_keys: NULL
          key: emp_no
      key_len: 4
          ref: NULL
         rows: 2838426
        Extra: Using index
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;query3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; EXPLAIN SELECT * FROM (SELECT emp_no FROM salaries) AS b\G;
*************************** 1. row ***************************
           id: 1
  select_type: PRIMARY
        table: &amp;lt;derived2&amp;gt;
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 2838426
        Extra: NULL
*************************** 2. row ***************************
           id: 2
  select_type: DERIVED
        table: salaries
         type: index
possible_keys: NULL
          key: emp_no
      key_len: 4
          ref: NULL
         rows: 2838426
        Extra: Using index
2 rows in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;query4:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; EXPLAIN SELECT 1 UNION ALL SELECT 1\G;
*************************** 1. row ***************************
           id: 1
  select_type: PRIMARY
        table: NULL
         type: NULL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: NULL
        Extra: No tables used
*************************** 2. row ***************************
           id: 2
  select_type: UNION
        table: NULL
         type: NULL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: NULL
        Extra: No tables used
*************************** 3. row ***************************
           id: NULL
  select_type: UNION RESULT
        table: &amp;lt;union1,2&amp;gt;
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: NULL
        Extra: Using temporary
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;一-id&#34;&gt;一、id&lt;/h3&gt;

&lt;p&gt;标识select所属于的行&lt;/p&gt;

&lt;h3 id=&#34;二-select-type&#34;&gt;二、select_type&lt;/h3&gt;

&lt;p&gt;标识是简单查询还是复杂查询
简单(SIMPLE)：不包括子查询和UNION。如&lt;strong&gt;query1&lt;/strong&gt;
复杂：最外层部分为PRIMARY,其余部分如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SUBQUERY：包括在SELECT中，不在FROM子句中。如&lt;strong&gt;query2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;DERIVED：表示包含在FROM中的SELECT中。如&lt;strong&gt;query3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;UNION：UNION中的第二个和随后的SELECT，如果UNION中的第一个SELECT被FROM包含，那么第一个为DERIVED。如&lt;strong&gt;query4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;UNION RESULT：UNION匿名临时表检索结果的SELECT。如query4 ps：UNION总是将结果存放在匿名临时表中，之后MYSQL将结果读取到临时表外。临时表并不在原sql中出现，因此id为NULL。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;三-table&#34;&gt;三、table&lt;/h3&gt;

&lt;p&gt;显示访问哪个表，join的时候左侧深度优先树。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; EXPLAIN SELECT emp_no FROM employees INNER JOIN dept_emp USING (emp_no) INNER JOIN departments USING (dept_no)\G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: departments
         type: index
possible_keys: PRIMARY
          key: dept_name
      key_len: 122
          ref: NULL
         rows: 9
        Extra: Using index
*************************** 2. row ***************************
           id: 1
  select_type: SIMPLE
        table: dept_emp
         type: ref
possible_keys: PRIMARY,emp_no,dept_no
          key: dept_no
      key_len: 12
          ref: employees.departments.dept_no
         rows: 1
        Extra: Using index
*************************** 3. row ***************************
           id: 1
  select_type: SIMPLE
        table: employees
         type: eq_ref
possible_keys: PRIMARY
          key: PRIMARY
      key_len: 4
          ref: employees.dept_emp.emp_no
         rows: 1
        Extra: Using index
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当在FROM子句中有子查询时，TABLE列是&lt;derivedN&gt;形式，其中N是子查询id。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; EXPLAIN SELECT * FROM (SELECT emp_no FROM (SELECT * FROM employees ) AS a) AS b\G;
*************************** 1. row ***************************
           id: 1
  select_type: PRIMARY
        table: &amp;lt;derived2&amp;gt;
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 299512
        Extra: NULL
*************************** 2. row ***************************
           id: 2
  select_type: DERIVED
        table: &amp;lt;derived3&amp;gt;
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 299512
        Extra: NULL
*************************** 3. row ***************************
           id: 3
  select_type: DERIVED
        table: employees
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 299512
        Extra: NULL
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：MySQL对待这些表和普通表一样，但是这些“临时表”是没有任何索引的&lt;/p&gt;

&lt;h3 id=&#34;四-type&#34;&gt;四、type&lt;/h3&gt;

&lt;p&gt;关联类型（访问类型）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ALL：全表扫描&lt;/li&gt;
&lt;li&gt;index：与全表扫描一样，只是Mysql扫描表时按索引次序进行而不是行。优点：避免了排序。缺点：按索引次序读取整个表的开销。Extra：Using index，说明Mysql正在使用覆盖索引，只扫描索引的数据，而不是索引次序的每一行。&lt;/li&gt;
&lt;li&gt;range：范围扫描是一个有限的索引扫描。例如：Between, where：&amp;gt;, IN, OR。&lt;/li&gt;
&lt;li&gt;ref：索引查找，非唯一索引和唯一索引前缀。ref_or_null是ref上的一个变体，它意味着MySQL必须在初次查找结果进行一次查找以找出NULL记录。&lt;/li&gt;
&lt;li&gt;eq_ref：是多返回一条符合条件的记录。&lt;/li&gt;
&lt;li&gt;const：where （主键=$num） 方式。&lt;/li&gt;
&lt;li&gt;NULL：优化阶段分解查询语句。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;五-possible-key列&#34;&gt;五、possible_key列&lt;/h3&gt;

&lt;p&gt;MySQL能使用哪些索引&lt;/p&gt;

&lt;h3 id=&#34;六-key&#34;&gt;六、key&lt;/h3&gt;

&lt;p&gt;mysql具体使用哪个索引&lt;/p&gt;

&lt;h3 id=&#34;七-key-len&#34;&gt;七、key_len&lt;/h3&gt;

&lt;p&gt;索引使用的字节数&lt;/p&gt;

&lt;p&gt;k计算公式：&lt;/p&gt;

&lt;p&gt;L：索引列所定义字段类型字符长度&lt;/p&gt;

&lt;p&gt;C：不同编码下一个字符所占的字节数（如utf8=3，gbk=2）&lt;/p&gt;

&lt;p&gt;N：字段为空标记，占1字节（非空字段此标记不占用字节）&lt;/p&gt;

&lt;p&gt;S：索引列字段是否定长（int、char、datetime为定长，varchar为不定长），不定长字段类型需记录长度信息，占2字节&lt;/p&gt;

&lt;p&gt;key_len = L*C[+N][+S]&lt;/p&gt;

&lt;p&gt;举例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE `dept_emp` (
  `emp_no` int(11) NOT NULL,
  `dept_no` char(4) NOT NULL,
  `from_date` date NOT NULL,
  `to_date` date NOT NULL,
  PRIMARY KEY (`emp_no`,`dept_no`),
  KEY `emp_no` (`emp_no`),
  KEY `dept_no` (`dept_no`),
  CONSTRAINT `dept_emp_ibfk_1` FOREIGN KEY (`emp_no`) REFERENCES `employees` (`emp_no`) ON DELETE CASCADE,
  CONSTRAINT `dept_emp_ibfk_2` FOREIGN KEY (`dept_no`) REFERENCES `departments` (`dept_no`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8

mysql&amp;gt; EXPLAIN SELECT * FROM dept_emp WHERE dept_no = &#39;d007&#39;\G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: dept_emp
         type: ref
possible_keys: dept_no
          key: dept_no
      key_len: 12
          ref: const
         rows: 93330
        Extra: Using index condition
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;计算方法：4*3 = 12&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE `employees` (
  `emp_no` int(11) NOT NULL,
  `birth_date` date NOT NULL,
  `first_name` varchar(14) NOT NULL,
  `last_name` varchar(16) DEFAULT NULL,
  `gender` enum(&#39;M&#39;,&#39;F&#39;) NOT NULL,
  `hire_date` date NOT NULL,
  PRIMARY KEY (`emp_no`),
  KEY `first_name_last_name` (`first_name`,`last_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8

mysql&amp;gt; EXPLAIN SELECT * FROM employees WHERE first_name = &#39;Tomofumi&#39; AND last_name = &#39;Asmuth&#39;\G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: employees
         type: ref
possible_keys: first_name_last_name
          key: first_name_last_name
      key_len: 95
          ref: const,const
         rows: 1
        Extra: Using index condition
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;计算方法：(14+16)*3 + 1 + 2*2 = 95&lt;/p&gt;

&lt;h3 id=&#34;八-ref&#34;&gt;八、ref&lt;/h3&gt;

&lt;p&gt;之前在key列记录的索引中查找值所用的列或常量&lt;/p&gt;

&lt;h3 id=&#34;九-row&#34;&gt;九、row&lt;/h3&gt;

&lt;p&gt;MySQL为了查找所需的行而要读取的行数。无法反应limit，不代表结果集。&lt;/p&gt;

&lt;h3 id=&#34;十-extra&#34;&gt;十、Extra&lt;/h3&gt;

&lt;p&gt;额外信息&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using index：使用覆盖索引。&lt;/li&gt;
&lt;li&gt;Using where：MySQL将存储引擎返回服务层以后再应用where条件过滤。&lt;/li&gt;
&lt;li&gt;Using temporary：对查询结果排序时会使用一个临时表。&lt;/li&gt;
&lt;li&gt;Using filesort：MySQL会对结果使用外部索引排序。&lt;/li&gt;
&lt;li&gt;Using Index condition：5.6新特性，可以进行索引筛选。&lt;a href=&#34;http://www.xiaojiong.net/2016/02/18/mysql-Index-Condition-Pushdown/&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Not exists：MySQL优化了left_join，一旦它找到了left join标准的行，就不再搜索了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;注意&#34;&gt;注意&lt;/h3&gt;

&lt;p&gt;mysql5.6以后支持非select语句。&lt;/p&gt;

&lt;h3 id=&#34;参考资料&#34;&gt;参考资料&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.oreilly.com.cn/index.php?func=book&amp;amp;isbn=978-7-121-19885-4&#34;&gt;高性能MYSQL(第三版)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mysql Index Condition Pushdown</title>
      <link>http://www.xiaojiong.net/2016/02/18/mysql-index-condition-pushdown/</link>
      <pubDate>Thu, 18 Feb 2016 14:36:47 +0800</pubDate>
      
      <guid>http://www.xiaojiong.net/2016/02/18/mysql-index-condition-pushdown/</guid>
      <description>

&lt;p&gt;从mysql5.6开始引入一个重要的优化，就是Index Condition Pushdown(ICP)&lt;/p&gt;

&lt;h3 id=&#34;什么是icp&#34;&gt;什么是ICP&lt;/h3&gt;

&lt;p&gt;Index Condition Pushdown(ICP)是MySQL用索引去表里取数据的一种优化。如果禁用ICP，引擎层会穿过索引在基表中寻找数据行，然后返回给MySQL Server层，再去为这些数据行进行WHERE后的条件的过滤。ICP启用，如果部分WHERE条件能使用索引中的字段，MySQL Server 会把这部分下推到引擎层。存储引擎通过使用索引条目，然后推索引条件进行评估，使用这个索引把满足的行从表中读取出。ICP能减少引擎层访问基表的次数和MySQL Server访问存储引擎的次数。总之是ICP的优化在引擎层就能够过滤掉大量的数据，这样无疑能够减少了对base table和mysql server的访问次数。&lt;/p&gt;

&lt;h3 id=&#34;icp图解&#34;&gt;ICP图解&lt;/h3&gt;

&lt;p&gt;没有ICP之前：
where条件-&amp;gt;index索引-&amp;gt;table filter（mysql_server）
&lt;img src=&#34;http://ww1.sinaimg.cn/mw690/68faff51gw1f13fxanouvj20df0camz5.jpg&#34; alt=&#34;ICP之前&#34; /&gt;
ICP之后：
where条件-&amp;gt;index索引-&amp;gt;index filter-&amp;gt;table filter(mysql_server)
&lt;img src=&#34;http://ww1.sinaimg.cn/mw690/68faff51gw1f13fxanouvj20df0camz5.jpg&#34; alt=&#34;ICP之后&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;数据库&#34;&gt;数据库&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://launchpad.net/test-db/employees-db-1/1.0.6/+download/employees_db-full-1.0.6.tar.bz2&#34;&gt;示例数据库下载地址&lt;/a&gt;
employees的数据库如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; SHOW TABLES;
+---------------------+
| Tables_in_employees |
+---------------------+
| departments         |
| dept_emp            |
| dept_manager        |
| employees           |
| salaries            |
| titles              |
+---------------------+
6 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;employees表结构如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show create table employees;
-------------------------------------------------------+
| employees | CREATE TABLE `employees` (
  `emp_no` int(11) NOT NULL,
  `birth_date` date NOT NULL,
  `first_name` varchar(14) NOT NULL,
  `last_name` varchar(16) NOT NULL,
  `gender` enum(&#39;M&#39;,&#39;F&#39;) NOT NULL,
  `hire_date` date NOT NULL,
  PRIMARY KEY (`emp_no`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;建立联合索引&#34;&gt;建立联合索引&lt;/h3&gt;

&lt;p&gt;这个表默认只有一个主索引，因为ICP只能作用于二级索引，所以我们建立一个二级索引：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ALTER TABLE employees.employees ADD INDEX first_name_last_name (first_name, last_name);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查询&#34;&gt;查询&lt;/h3&gt;

&lt;p&gt;启用profiling并关闭query cache：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SET profiling = 1;
SET query_cache_type = 0;
SET GLOBAL query_cache_size = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行查询：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+----------+------------+-----------------------------------
| Query_ID | Duration   | Query  |
+----------+------------+-----------------------------------
|        8 | 0.00054575 | SELECT * FROM employees WHERE first_name=&#39;Mary&#39; AND last_name LIKE &#39;%man&#39;              |
|        9 | 0.00046400 | SELECT * FROM employees WHERE first_name=&#39;Mary&#39; AND last_name LIKE &#39;%man&#39;              |
|       10 | 0.00048650 | SELECT * FROM employees WHERE first_name=&#39;Mary&#39; AND last_name LIKE &#39;%man&#39;              |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关闭ICP&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SET optimizer_switch=&#39;index_condition_pushdown=off&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行查询&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+----------+------------+-----------------------------------
| Query_ID | Duration   | Query  |
+----------+------------+-----------------------------------
|       12 | 0.00159075 | SELECT * FROM employees WHERE first_name=&#39;Mary&#39; AND last_name LIKE &#39;%man&#39;              |
|       13 | 0.00109525 | SELECT * FROM employees WHERE first_name=&#39;Mary&#39; AND last_name LIKE &#39;%man&#39;              |
|       14 | 0.00130850 | SELECT * FROM employees WHERE first_name=&#39;Mary&#39; AND last_name LIKE &#39;%man&#39;              |
+----------+------------+----------------------------------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过以上的示例可以很清楚的发现开启和关闭ICP的区别，我们看一下explain&lt;/p&gt;

&lt;p&gt;开启ICP&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; SET optimizer_switch=&#39;index_condition_pushdown=on&#39;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; EXPLAIN SELECT * FROM employees WHERE first_name=&#39;Mary&#39; AND last_name LIKE &#39;%man&#39;\G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: employees
         type: ref
possible_keys: first_name_last_name
          key: first_name_last_name
      key_len: 58
          ref: const
         rows: 224
        Extra: Using index condition
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关闭ICP&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; SET optimizer_switch=&#39;index_condition_pushdown=off&#39;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; EXPLAIN SELECT * FROM employees WHERE first_name=&#39;Mary&#39; AND last_name LIKE &#39;%man&#39;\G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: employees
         type: ref
possible_keys: first_name_last_name
          key: first_name_last_name
      key_len: 58
          ref: const
         rows: 224
        Extra: Using where
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意Extra的区别，开启ICP是Using index condition，关闭ICP是Using where&lt;/p&gt;

&lt;h3 id=&#34;注意&#34;&gt;注意&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ICP只能用于二级索引，不能用于主索引。&lt;/li&gt;
&lt;li&gt;也不是全部where条件都可以用ICP筛选，如果某where条件的字段不在索引中，当然还是要读取整条记录做筛选，在这种情况下，仍然要到server端做where筛选。&lt;/li&gt;
&lt;li&gt;ICP的加速效果取决于在存储引擎内通过ICP筛选掉的数据的比例。（筛选的数据越多，效果越明显）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考资料&#34;&gt;参考资料&lt;/h3&gt;

&lt;p&gt;1.&lt;a href=&#34;https://mariadb.com/kb/en/mariadb/index-condition-pushdown/&#34;&gt;https://mariadb.com/kb/en/mariadb/index-condition-pushdown/&lt;/a&gt;
 2.&lt;a href=&#34;http://dev.mysql.com/doc/refman/5.6/en/index-condition-pushdown-optimization.html&#34;&gt;http://dev.mysql.com/doc/refman/5.6/en/index-condition-pushdown-optimization.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用mysql实现消息队列</title>
      <link>http://www.xiaojiong.net/2016/01/04/%E7%94%A8mysql%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 04 Jan 2016 21:04:15 +0800</pubDate>
      
      <guid>http://www.xiaojiong.net/2016/01/04/%E7%94%A8mysql%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid>
      <description>

&lt;p&gt;在复杂的系统中，为了解耦业务之间的耦合关系，往往需要消息队列来实现模块之间的异步通信。消息队列要满足以下要求：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;消息不能丢失，最好能只被处理一次&lt;/li&gt;
&lt;li&gt;FIFO顺序&lt;/li&gt;
&lt;li&gt;支持多生产者&lt;/li&gt;
&lt;li&gt;支持多消费者，每一个消息只能被一个消费者处理。&lt;/li&gt;
&lt;li&gt;支持并行消费&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;表结构&#34;&gt;表结构&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE `queue` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `biz` int(11) DEFAULT NULL COMMENT &#39;业务号&#39;,
  `conn_id` int(11) unsigned DEFAULT &#39;0&#39; COMMENT &#39;连接ID&#39;,
  `status` enum(&#39;y&#39;,&#39;run&#39;,&#39;n&#39;) DEFAULT &#39;n&#39; COMMENT &#39;状态（n=&amp;gt;未处理，run=&amp;gt;处理中，y=&amp;gt;处理完毕）&#39;,
  `data_string` text COMMENT &#39;数据载体&#39;,
  `times` int(10) DEFAULT NULL COMMENT &#39;入库时间&#39;,
  `update_times` int(10) DEFAULT NULL COMMENT &#39;状态更新时间&#39;,
  PRIMARY KEY (`id`),
  KEY `biz` (`biz`,`conn_id`,`status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;实现方案&#34;&gt;实现方案&lt;/h3&gt;

&lt;p&gt;为了支持FIFO顺序，可以用MySql的自增ID来排序，先进入的消息ID要小些。MySql数据库是支持并发操作的，这就自动支持了多生产者的情况。为了支持多消费者并且每个消息只被一个消费者处理，可以为每个消费者分配一个ID，当某个消息正在被消费者处理时，这个消费者就被认为是这个消息的所有者。&lt;/p&gt;

&lt;p&gt;关键在于怎么支持并发，怎么设置所有者？&lt;/p&gt;

&lt;h4 id=&#34;一-入队列&#34;&gt;一、入队列&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;INSERT INTO `queue` (`biz`, `data_string`, `times`) VALUES (&#39;1000&#39;, &#39;test&#39;, &#39;1451889723&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;二-出队列&#34;&gt;二、出队列&lt;/h4&gt;

&lt;p&gt;1.获取未被处理的消息，首先先占用这些消息，成为这些消息的所有者。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UPDATE `queue` SET `status` = &#39;run&#39;, `update_times` = 1451879201, `conn_id` = CONNECTION_ID() WHERE `conn_id` = 0 AND `status` = &#39;n&#39; LIMIT x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据mysql_affected_rows()的返回结果可以判断是否有未被处理的消息。若有，则取出消息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT `id`, `biz`, `status`, `times`, `data_string` FROM `athena_queue` WHERE `biz` = 1000 AND `conn_id` = CONNECTION_ID() AND `status` = &#39;run&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.处理消息，此时表不会被锁住，其它消费者也可以获取消息；
3.处理完毕后从数据库中更新&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UPDATE `queue` SET `status` = &#39;y&#39;, `update_times` = 1451879201 WHERE `id` = xxx, `conn_id` = xxx AND `status` = &#39;run&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果在1和2之间有一个消费者进程被kill了，那么该进程获取的消息将永远无法被处理了。&lt;/p&gt;

&lt;h4 id=&#34;三-失败的处理&#34;&gt;三、失败的处理&lt;/h4&gt;

&lt;p&gt;方案一：启动一个监护进程，定期去检查一下是否有超过一定时间限制，并且不在当前连接列表中的消息，并重置他们。可以使用:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SHOW PROCESSLIST 可以获取当前所有的连接ID
UPDATE `queue` SET `status` = &#39;n&#39;, `update_times` = 1451879201, `conn_id` = 0 WHERE `conn_id` NOT IN (xxx) AND `status` = &#39;run&#39; AND `update_times` &amp;lt; xxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方案二：将出库的第1步改为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UPDATE `queue` SET `status` = &#39;n&#39;, `update_times` = 1451879201, `conn_id` = 0 WHERE (`conn_id` = 0 AND `status` = &#39;n&#39; ) OR (`conn_id` NOT IN (xxx) AND `status` = &#39;run&#39; AND `update_times` &amp;lt; xxx) limit xxx;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样即使消费者A在第1步和第2步之间失败了，消费者B还可以重新取出该消息重新处理。所以只要还有消费者在，消息至少会被处理一次。&lt;/p&gt;

&lt;h4 id=&#34;四-如何实现只处理一次呢&#34;&gt;四、如何实现只处理一次呢？&lt;/h4&gt;

&lt;p&gt;如果消费者在第2步和第3步之间失败的话，这个消息就会被再次取出来处理一次，这样就一共处理了2次。要保证每个消息只被处理一次，也就是要保证第2步和第3步是一个原子操作，要么都做，要么都不做。在第2步和第3步开启事务。&lt;/p&gt;

&lt;p&gt;参考资料
&lt;a href=&#34;http://www.oreilly.com.cn/index.php?func=book&amp;amp;isbn=978-7-121-19885-4&#34;&gt;高性能MYSQL(第三版)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【转】MySQL的分页优化</title>
      <link>http://www.xiaojiong.net/2015/12/02/%E8%BD%ACmysql%E7%9A%84%E5%88%86%E9%A1%B5%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 02 Dec 2015 21:39:25 +0800</pubDate>
      
      <guid>http://www.xiaojiong.net/2015/12/02/%E8%BD%ACmysql%E7%9A%84%E5%88%86%E9%A1%B5%E4%BC%98%E5%8C%96/</guid>
      <description>

&lt;h3 id=&#34;原文链接-http-www-amogoo-com-article-9-http-www-amogoo-com-article-9&#34;&gt;&lt;a href=&#34;http://www.amogoo.com/article/9&#34;&gt;原文链接：http://www.amogoo.com/article/9&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;本文示例环境为MySQL5.6、InnoDB&lt;/li&gt;
&lt;li&gt;建表与数据初始化，数据来源于官网提供的employees库salaries表&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE `t_salaries` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `emp_no` int(11) NOT NULL,
  `salary` int(11) NOT NULL,
  `from_date` date NOT NULL,
  `to_date` date NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;分页语法&#34;&gt;分页语法&lt;/h3&gt;

&lt;p&gt;MySQL的分页语法非常简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select * from table where ? order by c asc|desc limit m, n;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示在table中，根据where过滤并通过c列排序后的结果集，获取从m行开始往后的n条数据，其中不包括第m行，用区间可表示为[m+1, m+n]。&lt;/p&gt;

&lt;h3 id=&#34;实验&#34;&gt;实验&lt;/h3&gt;

&lt;p&gt;那么如何来优化呢，废话不多说，下面直接上干货。
场景1（全表扫描带来的性能问题）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- 先看表数据
mysql&amp;gt; select count(*) from t_salaries;
+----------+
| count(*) |
+----------+
|  2844047 |
+----------+
1 row in set
  
-- sql1
mysql&amp;gt; select * from t_salaries order by emp_no asc limit 0,20;
......
20 rows in set
  
mysql&amp;gt; show profiles;
+----------+------------+---------------------------------------------------------+
| Query_ID | Duration   | Query                                                   |
+----------+------------+---------------------------------------------------------+
|        1 |  1.4158355 | select * from t_salaries order by emp_no asc limit 0,20 |
+----------+------------+---------------------------------------------------------+
1 rows in set
  
mysql&amp;gt; explain select * from t_salaries order by emp_no desc limit 0,20;
+----+-------------+------------+------+---------------+------+---------+------+---------+----------------+
| id | select_type | table      | type | possible_keys | key  | key_len | ref  | rows    | Extra          |
+----+-------------+------------+------+---------------+------+---------+------+---------+----------------+
|  1 | SIMPLE      | t_salaries | ALL  | NULL          | NULL | NULL    | NULL | 2837536 | Using filesort |
+----+-------------+------------+------+---------------+------+---------+------+---------+----------------+
1 row in set
  
-- 添加order by列的索引
mysql&amp;gt; alter table `t_salaries` add index `idx_emp_no` (`emp_no`) using btree;
Query OK, 0 rows affected
Records: 0  Duplicates: 0  Warnings: 0
  
-- sql2
mysql&amp;gt; select * from t_salaries order by emp_no asc limit 0,20;
......
20 rows in set
  
mysql&amp;gt; show profiles;
+----------+------------+---------------------------------------------------------+
| Query_ID | Duration   | Query                                                   |
+----------+------------+---------------------------------------------------------+
|        1 | 0.00107775 | select * from t_salaries order by emp_no asc limit 0,20 |
+----------+------------+---------------------------------------------------------+
1 rows in set
  
mysql&amp;gt; explain select * from t_salaries order by emp_no asc limit 0,20;
+----+-------------+------------+-------+---------------+------------+---------+------+------+-------+
| id | select_type | table      | type  | possible_keys | key        | key_len | ref  | rows | Extra |
+----+-------------+------------+-------+---------------+------------+---------+------+------+-------+
|  1 | SIMPLE      | t_salaries | index | NULL          | idx_emp_no | 4       | NULL |   20 | NULL  |
+----+-------------+------------+-------+---------------+------------+---------+------+------+-------+
1 row in set
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过show profiles可以看到同一个sql，因为索引的缘故，性能上有1000多倍的差距，而通过对比两者的执行计划，我们发现sql1是一个全表扫描，所影响的行为所有行，而sql2是索引扫描，只影响20行，而且也没有了filesort的过程。&lt;/p&gt;

&lt;p&gt;那么为什么这样就能优化呢？
解释很简单，随机给出100个数字，要找出其中最大的20个，怎么找？是不是至少需要读取一次所有数据，通过比较再得出最大的20个，这个比较的过程通常会是一个排序的过程。但要是给出的这100个数字已经是按从大到小顺序排列好的，那就简单了，只要读取前20个数字就好了，不需要读取剩下的。直接反应到数据中，就是减少了IO。
而通常实际开发中，需要排序的字段在表中存储往往是无序的（除非是InnoDB表中的主键字段），比如上述sql中的emp_no在表中就是无序的，而对该列创建的索引就是使他能够被有序的检索，以此来达到优化的目的。&lt;/p&gt;

&lt;p&gt;场景2（limit偏移量过大带来的性能问题）：
依然是这个sql，不过这次是查询从200w开始往后的20条数据，来看执行结果。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- sql3
mysql&amp;gt; select * from t_salaries order by emp_no asc limit 2000000,20;
......
20 rows in set
  
mysql&amp;gt; show profiles;
+----------+-----------+---------------------------------------------------------------+
| Query_ID | Duration  | Query                                                         |
+----------+-----------+---------------------------------------------------------------+
|        1 | 1.9852275 | select * from t_salaries order by emp_no asc limit 2000000,20 |
+----------+-----------+---------------------------------------------------------------+
1 rows in set
  
mysql&amp;gt; explain select * from t_salaries order by emp_no asc limit 2000000,20;
+----+-------------+------------+------+---------------+------+---------+------+---------+----------------+
| id | select_type | table      | type | possible_keys | key  | key_len | ref  | rows    | Extra          |
+----+-------------+------------+------+---------------+------+---------+------+---------+----------------+
|  1 | SIMPLE      | t_salaries | ALL  | NULL          | NULL | NULL    | NULL | 2837536 | Using filesort |
+----+-------------+------------+------+---------------+------+---------+------+---------+----------------+
1 row in set
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对比场景1中sql2，我们看到随着limit偏移量的增加，查询时间也会随之增加，通过执行计划，会发现受影响的行也会随之增加，直到全表扫描（上例sql的偏移量已超过走索引的阀值，所以直接是全表，可自行测试分别从100,1000&amp;hellip;.开始取值，观察执行计划的变化）。&lt;/p&gt;

&lt;p&gt;此案例的优化方式有多种，但思路是一致的，就是减少IO，那么如何减少IO，下面介绍几中常用的优化方式。
方案1：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- sql4
mysql&amp;gt; select t1.* from t_salaries t1 inner join (select id from t_salaries order by emp_no asc limit 2000000,20) t2 on t1.id = t2.id;
......
20 rows in set
  
mysql&amp;gt; show profiles;
+----------+-----------+--------------------------------------------------------------------------------------------------------------------------------+
| Query_ID | Duration  | Query                                                                                                                          |
+----------+-----------+--------------------------------------------------------------------------------------------------------------------------------+
|        1 | 0.3565585 | select t1.* from t_salaries t1 inner join (select id from t_salaries order by emp_no asc limit 2000000,20) t2 on t1.id = t2.id |
+----------+-----------+--------------------------------------------------------------------------------------------------------------------------------+
1 row in set
  
mysql&amp;gt; explain select t1.* from t_salaries t1 inner join (select id from t_salaries order by emp_no asc limit 2000000,20) t2 on t1.id = t2.id;
+----+-------------+------------+--------+---------------+------------+---------+-------+---------+-------------+
| id | select_type | table      | type   | possible_keys | key        | key_len | ref   | rows    | Extra       |
+----+-------------+------------+--------+---------------+------------+---------+-------+---------+-------------+
|  1 | PRIMARY     | &amp;lt;derived2&amp;gt; | ALL    | NULL          | NULL       | NULL    | NULL  | 2000020 | NULL        |
|  1 | PRIMARY     | t1         | eq_ref | PRIMARY       | PRIMARY    | 4       | t2.id |       1 | NULL        |
|  2 | DERIVED     | t_salaries | index  | NULL          | idx_emp_no | 4       | NULL  | 2837536 | Using index |
+----+-------------+------------+--------+---------------+------------+---------+-------+---------+-------------+
3 rows in set
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过执行计划可以看到，此方案虽然也要扫描2837536行，但走的是全索引扫描（只扫描索引块），相比较全表扫描，很大程度上减少了IO读取。再通过id的匹配，走了主键索引。因此对比sql3的全表扫描，有了5倍多的提速。
注意点，inner join中的子查询sql一定要走全索引扫描，即要将子查询sql中所有涉及的列（select列、where列、order by列）都要加到一个索引里，如果还要回表的话，就达不到优化的目的。百度上很多文章都提到此优化方案，但对于这一点，都是说的不清不楚，对初学者会造成很大的困扰。&lt;/p&gt;

&lt;p&gt;方案2（基于主键排序的分页优化）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- sql5
mysql&amp;gt; explain select * from t_salaries where id &amp;gt;= (select id from t_salaries order by id asc limit 2000000,1) order by id asc limit 20;
+----+-------------+------------+-------+---------------+---------+---------+------+---------+-------------+
| id | select_type | table      | type  | possible_keys | key     | key_len | ref  | rows    | Extra       |
+----+-------------+------------+-------+---------------+---------+---------+------+---------+-------------+
|  1 | PRIMARY     | t_salaries | range | PRIMARY       | PRIMARY | 4       | NULL | 1418768 | Using where |
|  2 | SUBQUERY    | t_salaries | index | NULL          | PRIMARY | 4       | NULL | 2837536 | Using index |
+----+-------------+------------+-------+---------------+---------+---------+------+---------+-------------+
2 rows in set
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此方案用于基于主键排序的分页优化，在实际中较少使用，写在这里是觉得有助于拓宽思路，依旧是通过主键索引扫描，减少IO来达到优化的目的。&lt;/p&gt;

&lt;p&gt;总而言之，分页SQL优化的关键就是更好的利用索引，而利用索引的本质就是为了减少IO。
其实，分页另一种优化思路就是不在数据库分页，比如可以用一些全文检索的方案来解决，当然这不是本文要探讨的，但也确实是个思路。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>