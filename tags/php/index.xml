<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Persistence</title>
    <link>http://www.xiaojiong.net/tags/php/index.xml</link>
    <description>Recent content on Persistence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Xiaojiong</copyright>
    <atom:link href="http://www.xiaojiong.net/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>phpredis扩展修复记</title>
      <link>http://www.xiaojiong.net/2016/01/13/phpredis%E6%89%A9%E5%B1%95%E4%BF%AE%E5%A4%8D%E8%AE%B0/</link>
      <pubDate>Wed, 13 Jan 2016 22:08:17 +0800</pubDate>
      
      <guid>http://www.xiaojiong.net/2016/01/13/phpredis%E6%89%A9%E5%B1%95%E4%BF%AE%E5%A4%8D%E8%AE%B0/</guid>
      <description>

&lt;p&gt;最近由于项目需要，我在用php+redis+lua开发项目的时候发现一个bug&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    $redis = new Redis();
    $redis-&amp;gt;connect(&#39;127.0.0.1&#39;, 6379);
    $res = $redis-&amp;gt;eval(&#39;return 32140378*16777216&#39;);
    var_dump($res);
    实际的结果：1509949440
    正确的结果：539226064027648
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;定位问题&#34;&gt;定位问题&lt;/h3&gt;

&lt;p&gt;首先在定位问题在哪？我首先用redis在shell里直接执行lua脚本，发现结果正确。排除redis与lua兼容性的问题，那么问题可以确定是phpredis扩展的问题。于是我从pecl上下载最新的2.2.7版本，重新安装扩展，结果还是如此。&lt;/p&gt;

&lt;h3 id=&#34;解决问题&#34;&gt;解决问题&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;首先想到的就是搜索引擎，在尝试各种关键字+各种搜索引擎无果。&lt;/li&gt;
&lt;li&gt;去stackoverflow看看老外有什么好办法没。还是不行~&lt;/li&gt;
&lt;li&gt;去github上提交问题 &lt;a href=&#34;https://github.com/phpredis/phpredis/issues/718&#34;&gt;issues-718&lt;/a&gt;。还是不行~&lt;/li&gt;
&lt;li&gt;只好自己看phpredis扩展源码解决了，发现library.c 中 replay_info 为int去掉符号位，也就是说只要eval返回值大于2^31-1就会溢出~修改为long int，发现bugfix。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;github&#34;&gt;github&lt;/h3&gt;

&lt;p&gt;为了以后其他人别踩这个坑，也为了开源事业做贡献，提交我的修复到：&lt;a href=&#34;https://github.com/phpredis/phpredis/pull/724&#34;&gt;pull-724&lt;/a&gt;。
我第一次在github上提交版本过程中特别感谢&lt;a href=&#34;https://github.com/michael-grunder&#34;&gt;michael-grunder&lt;/a&gt;对我的帮助。&lt;/p&gt;

&lt;h3 id=&#34;鸣谢&#34;&gt;鸣谢&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/walu/phpbook&#34;&gt;PHP扩展开发及内核应用&lt;/a&gt;
&lt;a href=&#34;http://www.laruence.com/&#34;&gt;鸟哥的博客&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于php变量的那点儿事</title>
      <link>http://www.xiaojiong.net/2015/12/18/%E5%85%B3%E4%BA%8Ephp%E5%8F%98%E9%87%8F%E7%9A%84%E9%82%A3%E7%82%B9%E5%84%BF%E4%BA%8B/</link>
      <pubDate>Fri, 18 Dec 2015 22:22:46 +0800</pubDate>
      
      <guid>http://www.xiaojiong.net/2015/12/18/%E5%85%B3%E4%BA%8Ephp%E5%8F%98%E9%87%8F%E7%9A%84%E9%82%A3%E7%82%B9%E5%84%BF%E4%BA%8B/</guid>
      <description>

&lt;p&gt;PHP属于弱类型语言：一个变量可以表示任意的数据类型。&lt;/p&gt;

&lt;p&gt;PHP之所以成为一个简单而强大的语言，很大一部分的原因是它拥有弱类型的变量。 但是有些时候这也是一把双刃剑，使用不当也会带来一些问题。就像仪器一样，越是功能强大， 出现错误的可能性也就越大。&lt;/p&gt;

&lt;p&gt;在官方的PHP实现内部，所有变量使用同一种数据结构(zval)来保存，而这个结构同时表示PHP中的各种数据类型。 它不仅仅包含变量的值，也包含变量的类型。这就是PHP弱类型的核心。&lt;/p&gt;

&lt;h3 id=&#34;一-php变量类型&#34;&gt;一、PHP变量类型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;标量类型： boolean、integer、float(double)、string&lt;/li&gt;
&lt;li&gt;复合类型： array、object&lt;/li&gt;
&lt;li&gt;特殊类型： resource、NULL&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;二-php变量存储结构&#34;&gt;二、PHP变量存储结构&lt;/h3&gt;

&lt;p&gt;前面提到变量的值存储在zvalue_value联合体中，结构体定义如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef union _zvalue_value {
    long lval;                  /* long value */
    double dval;                /* double value */
    struct {
        char *val;
        int len;
    } str;
    HashTable *ht;              /* hash table value */
    zend_object_value obj;
} zvalue_value;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;使用联合体而不是用结构体是出于空间利用率的考虑，因为一个变量同时只能属于一种类型。 如果使用结构体的话将会不必要的浪费空间，而PHP中的所有逻辑都围绕变量来进行的，这样的话， 内存浪费将是十分大的。这种做法成本小但收益非常大。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;字符串string&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;struct {
    char *val;
    int len;
} str;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里字符串使用的是一个结构体，额外存储了一个长度值，所以导致strlen()函数可以在常数时间内获取到字符串的长度。这种是典型的牺牲空间换时间的做法。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对象
（略）&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数组
PHP中数组的实现是哈希表+链表的方式存储。参见：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.xiaojiong.net/2015/12/12/PHP%E4%B8%AD%E7%9A%84%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%88HashTable%EF%BC%89/&#34;&gt;PHP中的哈希表&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.xiaojiong.net/2015/12/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8D%EF%BC%8D%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/&#34;&gt;数据结构&amp;ndash;双向链表&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PHP中的哈希表（HashTable）</title>
      <link>http://www.xiaojiong.net/2015/12/12/php%E4%B8%AD%E7%9A%84%E5%93%88%E5%B8%8C%E8%A1%A8hashtable/</link>
      <pubDate>Sat, 12 Dec 2015 22:51:41 +0800</pubDate>
      
      <guid>http://www.xiaojiong.net/2015/12/12/php%E4%B8%AD%E7%9A%84%E5%93%88%E5%B8%8C%E8%A1%A8hashtable/</guid>
      <description>

&lt;p&gt;PHP中使用最为频繁的数据类型非字符串和数组莫属，PHP比较容易上手也得益于非常灵活的数组类型。 在开始详细介绍这些数据类型之前有必要介绍一下哈希表(HashTable)。 哈希表是PHP实现中尤为关键的数据结构。&lt;/p&gt;

&lt;p&gt;哈希表在实践中使用的非常广泛，例如编译器通常会维护的一个符号表来保存标记，很多高级语言中也显式的支持哈希表。 哈希表通常提供查找(Search)，插入(Insert)，删除(Delete)等操作，这些操作在最坏的情况下和链表的性能一样为O(n)。 不过通常并不会这么坏，合理设计的哈希算法能有效的避免这类情况，通常哈希表的这些操作时间复杂度为O(1)。 这也是它被钟爱的原因。&lt;/p&gt;

&lt;h3 id=&#34;基本概念&#34;&gt;基本概念&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;键(key)：用于操作数据的标示，例如PHP数组中的索引，或者字符串键等等。&lt;/li&gt;
&lt;li&gt;槽(slot/bucket)：哈希表中用于保存数据的一个单元，也就是数据真正存放的容器。&lt;/li&gt;
&lt;li&gt;哈希函数(hash function)：将key映射(map)到数据应该存放的slot所在位置的函数。&lt;/li&gt;
&lt;li&gt;哈希冲突(hash collision)：哈希函数将两个不同的key映射到同一个索引的情况。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;哈希表可以理解为数组的扩展或者关联数组，数组使用数字下标来寻址，如果关键字(key)的范围较小且是数字的话， 我们可以直接使用数组来完成哈希表，而如果关键字范围太大，如果直接使用数组我们需要为所有可能的key申请空间。 很多情况下这是不现实的。即使空间足够，空间利用率也会很低，这并不理想。同时键也可能并不是数字， 在PHP中尤为如此，所以人们使用一种映射函数(哈希函数)来将key映射到特定的域中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;h(key) -&amp;gt; index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过合理设计的哈希函数，我们就能将key映射到合适的范围，因为我们的key空间可以很大(例如字符串key)， 在映射到一个较小的空间中时可能会出现两个不同的key映射被到同一个index上的情况， 这就是我们所说的出现了冲突。 目前解决hash冲突的方法主要有两种：链接法和开放寻址法。&lt;/p&gt;

&lt;h3 id=&#34;解决冲突&#34;&gt;解决冲突&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;链接法（PHP）
链接法通过使用一个链表来保存slot值的方式来解决冲突，也就是当不同的key映射到一个槽中的时候使用链表来保存这些值。 所以使用链接法是在最坏的情况下，也就是所有的key都映射到同一个槽中了，这样哈希表就退化成了一个链表， 这样的话操作链表的时间复杂度则成了O(n)，这样哈希表的性能优势就没有了， 所以选择一个合适的哈希函数是最为关键的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;开放寻址法
使用开放寻址法是槽本身直接存放数据， 在插入数据时如果key所映射到的索引已经有数据了，这说明发生了冲突，这是会寻找下一个槽， 如果该槽也被占用了则继续寻找下一个槽，直到寻找到没有被占用的槽，在查找时也使用同样的策略来进行。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;哈希表的实现&#34;&gt;哈希表的实现&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;实现哈希函数&lt;/li&gt;
&lt;li&gt;冲突的解决&lt;/li&gt;
&lt;li&gt;操作接口的实现&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;php中的应用&#34;&gt;PHP中的应用&lt;/h3&gt;

&lt;p&gt;变量的作用域、函数表、类的属性、方法等，Zend引擎内部的很多数据都是保存在哈希表中的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;哈希表结构&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; typedef struct _hashtable { 
    uint nTableSize;        // hash Bucket的大小，最小为8，以2x增长。
    uint nTableMask;        // nTableSize-1 ， 索引取值的优化
    uint nNumOfElements;    // hash Bucket中当前存在的元素个数，count()函数会直接返回此值 
    ulong nNextFreeElement; // 下一个数字索引的位置
    Bucket *pInternalPointer;   // 当前遍历的指针（foreach比for快的原因之一）
    Bucket *pListHead;          // 存储数组头元素指针
    Bucket *pListTail;          // 存储数组尾元素指针
    Bucket **arBuckets;         // 存储hash数组
    dtor_func_t pDestructor;    // 在删除元素时执行的回调函数，用于资源的释放
    zend_bool persistent;       //指出了Bucket内存分配的方式。如果persisient为TRUE，则使用操作系统本身的内存分配函数为Bucket分配内存，否则使用PHP的内存分配函数。
    unsigned char nApplyCount; // 标记当前hash Bucket被递归访问的次数（防止多次递归）
    zend_bool bApplyProtection;// 标记当前hash桶允许不允许多次访问，不允许时，最多只能递归3次
#if ZEND_DEBUG
    int inconsistent;
#endif
} HashTable;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;数据容器：槽位&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;typedef struct bucket {
    ulong h;            // 对char *key进行hash后的值，或者是用户指定的数字索引值
    uint nKeyLength;    // hash关键字的长度，如果数组索引为数字，此值为0
    void *pData;        // 指向value，一般是用户数据的副本，如果是指针数据，则指向pDataPtr
    void *pDataPtr;     //如果是指针数据，此值会指向真正的value，同时上面pData会指向此值
    struct bucket *pListNext;   // 整个hash表的下一元素
    struct bucket *pListLast;   // 整个哈希表该元素的上一个元素
    struct bucket *pNext;       // 存放在同一个hash Bucket内的下一个元素
    struct bucket *pLast;       // 同一个哈希bucket的上一个元素
    // 保存当前值所对于的key字符串，这个字段只能定义在最后，实现变长结构体
    char arKey[1];              
} Bucket;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;zend引擎哈希表结构和关系&#34;&gt;Zend引擎哈希表结构和关系&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/68faff51jw1eyx9mnolj5j20k00dhmz3.jpg&#34; alt=&#34;tool-editor&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bucket结构体维护了两个双向链表，pNext和pLast指针分别指向本槽位所在的链表的关系。&lt;/li&gt;
&lt;li&gt;而pListNext和pListLast指针指向的则是整个哈希表所有的数据之间的链接关系。 HashTable结构体中的pListHead和pListTail则维护整个哈希表的头元素指针和最后一个元素的指针。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;PHP中数组的操作函数非常多，例如：array_shift()和array_pop()函数，分别从数组的头部和尾部弹出元素。哈希表中保存了头部和尾部指针，这样在执行这些操作时就能在常数时间内找到目标。PHP中还有一些使用的相对不那么多的数组操作函数：next()，prev()等的循环中，哈希表的另外一个指针就能发挥作用了：pInternalPointer，这个用于保存当前哈希表内部的指针。 这在循环时就非常有用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如图中左下角的假设，假设依次插入了Bucket1，Bucket2，Bucket3三个元素：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;插入Bucket1时，哈希表为空，经过哈希后定位到索引为1的槽位。此时的1槽位只有一个元素Bucket1。其中Bucket1的pData或者pDataPtr指向的是Bucket1所存储的数据。此时由于没有链接关系。pNext，pLast，pListNext，pListLast指针均为空。同时在HashTable结构体中也保存了整个哈希表的第一个元素指针，和最后一个元素指针，此时HashTable的pListHead和pListTail指针均指向Bucket1。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;插入Bucket2时，由于Bucket2的key和Bucket1的key出现冲突，此时将Bucket2放在双链表的前面。由于Bucket2后插入并置于链表的前端，此时Bucket2.pNext指向Bucket1，由于Bucket2后插入。Bucket1.pListNext指向Bucket2，这时Bucket2就是哈希表的最后一个元素，这是HashTable.pListTail指向Bucket2。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;插入Bucket3，该key没有哈希到槽位1，这时Bucket2.pListNext指向Bucket3，因为Bucket3后插入。同时HashTable.pListTail改为指向Bucket3。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>php性能分析工具xhprof使用</title>
      <link>http://www.xiaojiong.net/2015/07/15/php%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7xhprof%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 15 Jul 2015 20:01:51 +0800</pubDate>
      
      <guid>http://www.xiaojiong.net/2015/07/15/php%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7xhprof%E4%BD%BF%E7%94%A8/</guid>
      <description>

&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;

&lt;p&gt;XHProf 是一个轻量级的分层性能测量分析器。 在数据收集阶段，它跟踪调用次数与测量数据，展示程序动态调用的弧线图。 它在报告、后期处理阶段计算了独占的性能度量，例如运行经过的时间、CPU 计算时间和内存开销。 函数性能报告可以由调用者和被调用者终止。 在数据搜集阶段 XHProf 通过调用图的循环来检测递归函数，通过赋予唯一的深度名称来避免递归调用的循环。XHProf 包含了一个基于 HTML 的简单用户界面(由 PHP 写成)。 基于浏览器的用户界面使得浏览、分享性能数据结果更加简单方便。 同时也支持查看调用图。XHProf的报告对理解代码执行结构常常很有帮助。 比如此分层报告可用于确定在哪个调用链里调用了某个函数。XHProf 对两次运行进行比较（又名 &amp;ldquo;diff&amp;rdquo; 报告），或者多次运行数据的合计。对比、合并报告，很像针对单次运行的“平式视图”性能报告，就像“分层式视图”的性能报告。更多额外文档可以在 » facebook xhprof 上找到。&lt;/p&gt;

&lt;h3 id=&#34;安装配置&#34;&gt;安装配置&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ wget https://github.com/facebook/xhprof/tarball/master -O xhprof.tar.gz
$ tar zxf xhprof.tar.gz
$ cd xhprof/extension/
$ phpize
$ ./configure --with-php-config=`/path/to/php-config`
$ make &amp;amp;&amp;amp; make install
$ make test
#安装Graphviz（点击[View Full Callgraph]有图片展示）
$ wget http://www.graphviz.org/pub/graphviz/stable/SOURCES/graphviz-2.24.0.tar.gz
$ tar zxf graphviz-2.24.0.tar.gz
$ cd graphviz-2.24.0
$ ./configure
$ make
$ make install 

$ vim /etc/php.ini
; 内容为：
extension = xhprof.so
; 注意：output_dir 必须存在且可写
xhprof.output_dir = /tmp/xhpro

$ mkdir -p /tmp/xhpro/
$ chmod -R 777 /tmp/xhpro/
重启php-fpm 或者apache
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
xhprof_enable(XHPROF_FLAGS_CPU+XHPROF_FLAGS_MEMORY);//加上这个参数可以使得xhprof显示cpu和内存相关的数据。

foo();//把要测量的函数用xhprof_enable和xhprof_disable包围起来。

$data = xhprof_disable();

//得到统计数据之后，以下的工作就是为页面显示做准备。
$xhprof_root = &amp;quot;/home/www/xhprof&amp;quot;;//这里填写的就是你的xhprof的路径
//
include_once $xhprof_root.&amp;quot;/xhprof_lib/utils/xhprof_lib.php&amp;quot;;
include_once $xhprof_root.&amp;quot;/xhprof_lib/utils/xhprof_runs.php&amp;quot;;
//
$xhprof_runs = new XHprofRuns_Default();
$run_id = $xhprof_runs-&amp;gt;save_run($data, &amp;quot;test&amp;quot;);//第二个参数在接下来的地方作为命名空间一样的概念来使用
//
///**************************
//  访问&amp;lt;xhprof-ui-address&amp;gt;/index.php?run=$run_id&amp;amp;source=test就能够看到一个统计列表了。
//    
//      1. &amp;lt;xhprof-ui-address&amp;gt;其实就是http://localhost/xhprof_html
//        
//      2. 你会在/tmp里面找到一个类似这样的文件：50f7ed6689205.test.xhprof，第一个部分就是run_id,当然，程序里面的$run_id跟这个是一样的。第二个部分的test就是你在save_run里面的第二个参数，第三个部分就是文件后缀不用去管
//
//      3. 例子中，要看到统计列表需要访问的地址就是http://localhost/xhpro_html/index.php?run=50f7ed6689205&amp;amp;source=test
//                 **************************/
//
function foo(){
    $a = 100;
}
//此处跳转到显示html路径(xhprof/xhprof_html下)
echo &amp;quot;&amp;lt;script language=&#39;javascript&#39;&amp;gt;window.location.href = &#39;http://192.168.1.132:9998/?run=&amp;quot; . $run_id . &amp;quot;&amp;amp;source=test&#39;;&amp;lt;/script&amp;gt;&amp;quot;;  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;html结果&#34;&gt;html结果&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/68faff51jw1eu3958bk3uj21es0lzwlq.jpg&#34; alt=&#34;html&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;图片分析结果&#34;&gt;图片分析结果&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/large/68faff51jw1eu3958qsoij21270iu0xd.jpg&#34; alt=&#34;pic&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>