<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Persistence</title>
    <link>http://www.xiaojiong.net/tags/design/index.xml</link>
    <description>Recent content on Persistence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Xiaojiong</copyright>
    <atom:link href="http://www.xiaojiong.net/tags/design/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>系统消息</title>
      <link>http://www.xiaojiong.net/2015/12/02/%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF/</link>
      <pubDate>Wed, 02 Dec 2015 22:12:33 +0800</pubDate>
      
      <guid>http://www.xiaojiong.net/2015/12/02/%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF/</guid>
      <description>

&lt;h3 id=&#34;业务简介&#34;&gt;业务简介&lt;/h3&gt;

&lt;p&gt;系统是消息是我所在公司的各类业务的消息聚合，特点是多业务方接入，数据量大。&lt;/p&gt;

&lt;h3 id=&#34;1-0版本实现&#34;&gt;1.0版本实现&lt;/h3&gt;

&lt;p&gt;存储过程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;入msg_queue表&lt;/li&gt;
&lt;li&gt;异步拆分msg_queue表记录&lt;/li&gt;
&lt;li&gt;拆分的数据存入msg_relation和msg_conent表中&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;表结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE `msg_queue` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,
  `biz` int(11) unsigned DEFAULT NULL COMMENT &#39;业务号&#39;,
  `relation` varchar(5000) DEFAULT NULL COMMENT &#39;推送的关系json&#39;,
  `add_times` int(10) unsigned DEFAULT NULL COMMENT &#39;入库时间&#39;,
  `update_times` int(10) unsigned DEFAULT NULL COMMENT &#39;更新时间&#39;,
  `result` varchar(5000) DEFAULT NULL COMMENT &#39;拆分结果&#39;,
  `status` enum(&#39;no&#39;,&#39;success&#39;,&#39;fail&#39;) DEFAULT &#39;no&#39; COMMENT &#39;no-&amp;gt;未拆分 fail-&amp;gt;失败 success-&amp;gt;成功&#39;,
  `type` enum(&#39;class&#39;,&#39;sys&#39;) DEFAULT &#39;sys&#39; COMMENT &#39;sys=&amp;gt; 系统消息,class=&amp;gt;班级动态&#39;,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `msg_relation` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,
  `biz` int(11) unsigned DEFAULT NULL,
  `send_id` int(11) unsigned DEFAULT NULL COMMENT &#39;发送者ID&#39;,
  `receive_id` int(11) unsigned DEFAULT NULL COMMENT &#39;接收ID&#39;,
  `content_id` int(11) unsigned DEFAULT NULL COMMENT &#39;内容ID&#39;,
  `add_times` int(10) unsigned DEFAULT NULL COMMENT &#39;入库时间&#39;,
  `update_times` int(10) unsigned DEFAULT NULL COMMENT &#39;更新时间&#39;,
  `other_id` int(11) DEFAULT NULL COMMENT &#39;如果receive_id是家长ID但是根据关系不能确定学生的时候，此时other_id就是\n学生id&#39;,
  PRIMARY KEY (`id`),
  KEY `idx_receive_id` (`receive_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `msg_content` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,
  `content` text COMMENT &#39;内容&#39;,
  `add_times` int(10) unsigned DEFAULT NULL COMMENT &#39;入库时间&#39;,
  `update_times` int(10) unsigned DEFAULT NULL COMMENT &#39;更新时间&#39;,
  `type` enum(&#39;all&#39;,&#39;class&#39;,&#39;one&#39;) DEFAULT &#39;one&#39; COMMENT &#39;消息类型，one一对一消息, all系统消息&#39;,
  `is_push` enum(&#39;n&#39;,&#39;y&#39;) DEFAULT &#39;n&#39; COMMENT &#39;是否推送&#39;,
  `push_object` text COMMENT &#39;推送内容&#39;,
  `call_back_func` varchar(255) DEFAULT NULL COMMENT &#39;回调函数名字&#39;,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;存储结构图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/large/68faff51jw1eyld7kpz03j20jl07vglx.jpg&#34; alt=&#34;1.0版本存储图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;读取过程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;两个对外接口提供读取数据分别为：
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;getAllListByPage：普通分页例如：
&lt;code&gt;
SELECT * FROM msg_relation LIMIT 0, 1000
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;getAllListById：根据上传的id，每次获取大于id的10条 例如：
&lt;code&gt;
SELECT * FROM msg_relation WHERE id &amp;gt; 100 LIMIT 10
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;根据relation表的内容读取content，然后格式化数据做返回。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;读取结构图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/68faff51jw1eyld7k3hmjj20ov07cdfx.jpg&#34; alt=&#34;1.0版本读取图&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;遇到的问题&#34;&gt;遇到的问题&lt;/h3&gt;

&lt;p&gt;当msg_relation表数据量越来越大时，类似这样的语句&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM msg_relation LIMIT 0, 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会很慢，并且会影响异步拆分脚本insert的效率。&lt;/p&gt;

&lt;h3 id=&#34;2-0版本实现&#34;&gt;2.0版本实现&lt;/h3&gt;

&lt;p&gt;将msg_relation表按月进行拆分(msg_relation_yyyy_mm)、ID采用发号器，暂定16位主键yyyymmddxxxxxxxx(2015120212345678)。只要每天的数据量不超过1个亿。该ID不会出现溢出。不考虑分布式，所以没有预留机器码。发号器的设计采用异步单进程，所以不考虑并发采用mysql自增主键来实现。为了实现冷热数据分离，新增msg_hot表，该表主要采用K=&amp;gt;V结构，uid=&amp;gt;id_list。id_list中存储relation表的ID序列。最大单人存储2000个ID（10条每页，200页），并且id_list有序。
表结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE `msg_hot` (
  `id` int(11) unsigned NOT NULL COMMENT &#39;sys=&amp;gt;uid,class=&amp;gt;class_id&#39;,
  `ids` varchar(10000) DEFAULT NULL COMMENT &#39;id list&#39;,
  `type` enum(&#39;class&#39;,&#39;sys&#39;) DEFAULT &#39;sys&#39; COMMENT &#39;sys=&amp;gt;系统消息，class=&amp;gt;班级动态&#39;,
  KEY `id_type_index` (`id`,`type`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;存储过程：
 1. 入msg_queue表
 2. 异步拆分msg_queue表记录
 3. 拆分的数据首先存入msg_hot表中
 4. 然后存入msg_relation_yyyy_mm和msg_conent表中&lt;/p&gt;

&lt;p&gt;存储结构图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ww3.sinaimg.cn/large/68faff51jw1eyld7l3gr2j20o20gf75l.jpg&#34; alt=&#34;2.0版本存储图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;读取过程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;两个对外接口提供读取数据分别为：

&lt;ul&gt;
&lt;li&gt;getAllListByPage：直接根据uid命中msg_hot表中的记录对id_list进行分页。&lt;/li&gt;
&lt;li&gt;getAllListById：根据上传的id和uid命中msg_hot表中的记录对id_list进行分页。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;根据msg_hot表查询出来的主键读取msg_relation，然后读取msg_content，最后格式化数据做返回。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;后期的优化工作&#34;&gt;后期的优化工作&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;msg_hot表如果有性能需求，可以直接切换redis。&lt;/li&gt;
&lt;li&gt;msg_queue可以改为多进行消息队列模式（需要修改发号器，改为消息队列支持多进程并发）&lt;/li&gt;
&lt;li&gt;发号器更合理的ID设计&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>