<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Persistence</title>
    <link>http://xiaojiong.net/tags/vim/index.xml</link>
    <description>Recent content on Persistence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Xiaojiong</copyright>
    <atom:link href="http://xiaojiong.net/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>我的vim配置</title>
      <link>http://xiaojiong.net/2016/05/15/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 15 May 2016 05:25:32 +0800</pubDate>
      
      <guid>http://xiaojiong.net/2016/05/15/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE/</guid>
      <description>

&lt;p&gt;github地址:&lt;a href=&#34;https://github.com/mixiaojiong/tool&#34;&gt;https://github.com/mixiaojiong/tool&lt;/a&gt;
有好多开源的vim配置，比如k-vim, spf13.
一直想定制一款自己的vim配置。本配置严重借鉴，k-vim和spf13的配置。&lt;/p&gt;

&lt;h3 id=&#34;vimrc&#34;&gt;.vimrc&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;let mapleader = &#39;,&#39;
&amp;quot; Vundle
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

&amp;quot; install Vundle bundles
if filereadable(expand(&amp;quot;~/.vimrc.bundles&amp;quot;))
	source ~/.vimrc.bundles
endif

call vundle#end()

&amp;quot; 文件
filetype on
filetype indent on                  &amp;quot; 针对不同的文件类型采用不同的缩进格式
filetype plugin on                  &amp;quot; 允许插件
filetype plugin indent on           &amp;quot; 启动自动补全
set encoding=utf-8                  &amp;quot; 设置编码自动识别, 中文引号显示
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
&amp;quot; 外观
set background=dark                 &amp;quot; 主题背景
colorscheme solarized               &amp;quot; 颜色主题
syntax on                           &amp;quot; 语法高亮
set laststatus=2
set showcmd                         &amp;quot; 显示命令
set number                          &amp;quot; 显示行号
set ruler                           &amp;quot; 打开状态栏标尺
set cursorline                      &amp;quot; 突出显示当前行
set showmatch                      &amp;quot; 高亮显示匹配的括号
set matchtime=3                    &amp;quot; 匹配括号高亮的时间(单位：0.1s
set scrolloff=10                    &amp;quot; 光标到屏幕底端保留 10 行 (光标位于屏底看着非常不舒服的)
set ruler                           &amp;quot; 显示右下角提示栏
set showmode                        &amp;quot; 显示左下角状态栏
set listchars=tab:▸\ ,trail:▫
set wildmenu                        &amp;quot; 使用菜单形式展示列表
set wildmode=longest,list,full
&amp;quot; 基本配置
set autoread                        &amp;quot; 自动加载文件变化
set wrap                            &amp;quot; 设定折行
set textwidth=78                    &amp;quot; N个字符折行
set history=1000                    &amp;quot; 历史记录1000
set nocompatible                    &amp;quot; 禁用VI相关
set backspace=indent,eol,start      &amp;quot; 启用backspace删除
set clipboard+=unnamed              &amp;quot; 共享剪切板
set showcmd                         &amp;quot; 输入的命令显示出来
set iskeyword+=_,$,@,%,#,-          &amp;quot; 带有例如以下符号的单词不要被换行切割
&amp;quot;set mouse=a                         &amp;quot; 鼠标可用
set confirm                         &amp;quot; 未保存或者仅仅读时，弹出确认
set nobackup                        &amp;quot; 不生成备份文件
set noswapfile                      &amp;quot; 不生成 swap 文件
set bufhidden=hide                  &amp;quot; 当 buffer 被丢弃的时候隐藏
set noerrorbells                    &amp;quot; 不发出警告声
&amp;quot; 搜索
set ignorecase smartcase            &amp;quot; 搜索忽略大写和小写，但有大写字母时仍保持大写和小写敏感
set hlsearch                        &amp;quot; 高亮搜索
set incsearch                       &amp;quot; 增量式搜索,逐字符高亮

&amp;quot; 对齐
set autoindent                      &amp;quot; 继承前一行的缩进方式。特别适用于多行凝视
set smartindent                     &amp;quot; 智能折叠
set smarttab                        &amp;quot; 开启新行时使用智能 tab 缩进
set expandtab                       &amp;quot; 空格取代Tab
set tabstop=4                       &amp;quot; Tab 键的宽度
set shiftwidth=4                    &amp;quot; 行交错宽度
set softtabstop=4                   &amp;quot; 敲入tab键时实际占有的列数

&amp;quot; 自动
autocmd! bufwritepost .vimrc source %
autocmd BufNewFile *.sh,*.py,*.php,*.c exec &amp;quot;:call AutoSetFileHead()&amp;quot;
autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl autocmd BufWritePre &amp;lt;buffer&amp;gt; :call &amp;lt;SID&amp;gt;StripTrailingWhitespaces()

&amp;quot; 修改默认键
&amp;quot; 同物理行上线直接跳
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j
&amp;quot; F2 注释
map &amp;lt;F2&amp;gt;a :DoxAuthor&amp;lt;CR&amp;gt;
map &amp;lt;F2&amp;gt;f :Dox&amp;lt;CR&amp;gt;
map &amp;lt;F2&amp;gt;b :DoxBlock&amp;lt;CR&amp;gt;
map &amp;lt;F2&amp;gt;c O/** */&amp;lt;Left&amp;gt;&amp;lt;Left&amp;gt;&amp;lt;CR&amp;gt;
&amp;quot; 常用分屏
map &amp;lt;silent&amp;gt; &amp;lt;F3&amp;gt; &amp;lt;Esc&amp;gt;:He&amp;lt;CR&amp;gt;
map &amp;lt;silent&amp;gt; &amp;lt;F4&amp;gt; &amp;lt;Esc&amp;gt;:Ve&amp;lt;CR&amp;gt;
map &amp;lt;silent&amp;gt; &amp;lt;F5&amp;gt; &amp;lt;Esc&amp;gt;:Te&amp;lt;CR&amp;gt;
&amp;quot; F6 换行开关
nnoremap &amp;lt;F6&amp;gt; :set wrap! wrap?&amp;lt;CR&amp;gt;
&amp;quot; F7 复制粘贴网页代码前开启
set pastetoggle=&amp;lt;F7&amp;gt;
&amp;quot; F8 显示可打印字符开关
nnoremap &amp;lt;F8&amp;gt; :set list! list?&amp;lt;CR&amp;gt;
&amp;quot; F9 显示行号
nnoremap &amp;lt;F9&amp;gt; :set nu! nu?&amp;lt;CR&amp;gt;
&amp;quot; 分屏窗口移动
map &amp;lt;C-j&amp;gt; &amp;lt;C-W&amp;gt;j
map &amp;lt;C-k&amp;gt; &amp;lt;C-W&amp;gt;k
map &amp;lt;C-h&amp;gt; &amp;lt;C-W&amp;gt;h
map &amp;lt;C-l&amp;gt; &amp;lt;C-W&amp;gt;l
&amp;quot; 行首，行尾
noremap H ^
noremap L $
&amp;quot; 快速输入命令
nnoremap ; :
&amp;quot; 快速搜索
map &amp;lt;space&amp;gt; /
&amp;quot; 快速切换tabe
map &amp;lt;leader&amp;gt;gp gT
map &amp;lt;leader&amp;gt;gn gt
&amp;quot; normal模式下切换到确切的tab
noremap &amp;lt;leader&amp;gt;1 1gt
noremap &amp;lt;leader&amp;gt;2 2gt
noremap &amp;lt;leader&amp;gt;3 3gt
noremap &amp;lt;leader&amp;gt;4 4gt
noremap &amp;lt;leader&amp;gt;5 5gt
noremap &amp;lt;leader&amp;gt;6 6gt
noremap &amp;lt;leader&amp;gt;7 7gt
noremap &amp;lt;leader&amp;gt;8 8gt
noremap &amp;lt;leader&amp;gt;9 9gt
noremap &amp;lt;leader&amp;gt;0 :tablast&amp;lt;CR&amp;gt;

&amp;quot;==========================================
&amp;quot; FileType Settings  文件类型设置
&amp;quot;==========================================

&amp;quot; 具体编辑文件类型的一般设置，比如不要 tab 等
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab ai
autocmd FileType ruby,javascript,html,css,xml set tabstop=4 shiftwidth=4 expandtab ai
autocmd BufRead,BufNewFile *.md,*.mkd,*.markdown set filetype=markdown.mkd
autocmd BufRead,BufNewFile *.part set filetype=html
au BufEnter ~/code/letv/sso/* setlocal tags+=~/code/letv/sso/tags

&amp;quot; 自定义函数 {
    &amp;quot; 定义函数AutoSetFileHead，自动插入文件头
    function! AutoSetFileHead()
        &amp;quot;如果文件类型为.sh文件
        if &amp;amp;filetype == &#39;sh&#39;
            call setline(1, &amp;quot;\#!/bin/bash&amp;quot;)
        endif

        &amp;quot;如果文件类型为python
        if &amp;amp;filetype == &#39;python&#39;
            call setline(1, &amp;quot;\#!/usr/bin/env python&amp;quot;)
            call append(1, &amp;quot;\# encoding: utf-8&amp;quot;)
        endif

        &amp;quot;如果文件类型为.php文件
        if &amp;amp;filetype == &#39;php&#39;
            call setline(1, &amp;quot;&amp;lt;?php&amp;quot;)
        endif

        &amp;quot;如果文件类型为.c文件
        if &amp;amp;filetype == &#39;c&#39;
            call setline(1, &amp;quot;#include &amp;lt;stdio.h&amp;gt;&amp;quot;)
            call append(1, &amp;quot;\#include &amp;lt;stdlib.h&amp;gt;&amp;quot;)
            call setline(3, &amp;quot;&amp;quot;)
            call setline(4, &amp;quot;int main(void) {&amp;quot;)
        endif

        normal G
        normal o
        normal o
    endfunc

    &amp;quot; 保存文件时删除多余空格
    fun! &amp;lt;SID&amp;gt;StripTrailingWhitespaces()
        let l = line(&amp;quot;.&amp;quot;)
        let c = col(&amp;quot;.&amp;quot;)
        %s/\s\+$//e
        call cursor(l, c)
    endfun
&amp;quot; }

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;插件-vimrc-bundles&#34;&gt;插件.vimrc.bundles&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Plugin &#39;VundleVim/Vundle.vim&#39;
Plugin &#39;altercation/vim-colors-solarized&#39;               &amp;quot; 颜色 
Plugin &#39;scrooloose/nerdtree&#39;                            &amp;quot; 文件显示
Plugin &#39;scrooloose/syntastic&#39;                           &amp;quot; 语法检查
Plugin &#39;Xuyuanp/nerdtree-git-plugin&#39;                    &amp;quot; 文件显示git
Plugin &#39;jistr/vim-nerdtree-tabs&#39;                        &amp;quot; 文件标签管理
Plugin &#39;terryma/vim-expand-region&#39;                      &amp;quot; 快速范围选中
Plugin &#39;vim-scripts/DoxygenToolkit.vim&#39;                 &amp;quot; 注释
Plugin &#39;vim-airline/vim-airline&#39;                        &amp;quot; airline
Plugin &#39;vim-airline/vim-airline-themes&#39;                 &amp;quot; airline主题
Plugin &#39;tpope/vim-fugitive&#39;                             &amp;quot; git
Plugin &#39;airblade/vim-gitgutter&#39;                         &amp;quot; git
Plugin &#39;junegunn/vim-easy-align&#39;						&amp;quot; 快速对齐
Plugin &#39;fatih/vim-go&#39;									&amp;quot; golang
Plugin &#39;evanmiller/nginx-vim-syntax&#39;					&amp;quot; nginx配置文件
Plugin &#39;Lokaltog/vim-easymotion&#39;						&amp;quot; 强大的跳转
Plugin &#39;majutsushi/tagbar&#39;                              &amp;quot; 代码导航
Plugin &#39;vim-scripts/matchit.zip&#39;                        &amp;quot; html标签匹配
Plugin &#39;valloric/MatchTagAlways&#39;                        &amp;quot; html标签高亮匹配
Plugin &#39;maksimr/vim-jsbeautify&#39;                         &amp;quot; 格式化代码

&amp;quot; 插件相关
&amp;quot; syntastic {
    &amp;quot; dependence
    let g:syntastic_error_symbol=&#39;&amp;gt;&amp;gt;&#39;
    let g:syntastic_warning_symbol=&#39;&amp;gt;&#39;
    let g:syntastic_check_on_open=1
    let g:syntastic_check_on_wq=0
    let g:syntastic_enable_highlighting=1

    &amp;quot;set statusline+=%#warningmsg#
    &amp;quot;set statusline+=%{SyntasticStatuslineFlag()}
    &amp;quot;set statusline+=%*

    &amp;quot;let g:syntastic_always_populate_loc_list = 1
    &amp;quot;let g:syntastic_auto_loc_list = 1
    &amp;quot;let g:syntastic_check_on_open = 1
    &amp;quot;let g:syntastic_check_on_wq = 0
&amp;quot; }

&amp;quot; DoxygenToolkit {
    let g:DoxygenToolkit_briefTag_pre=&amp;quot;@synopsis  &amp;quot;
	let g:DoxygenToolkit_paramTag_pre=&amp;quot;@param &amp;quot;
	let g:DoxygenToolkit_returnTag=&amp;quot;@return   &amp;quot;
	let g:DoxygenToolkit_authorName=&amp;quot;zhaorui, zhaorui3@le.com&amp;quot;
&amp;quot; }

&amp;quot; MatchTagAlways {
    let g:mta_use_matchparen_group = 1
    let g:mta_filetypes = {
        \ &#39;html&#39; : 1,
        \ &#39;xhtml&#39; : 1,
        \ &#39;xml&#39; : 1,
        \ &#39;php&#39; : 1,
        \ &#39;jinja&#39; : 1,
        \}
&amp;quot; }

&amp;quot; jsbeautify {
	map &amp;lt;F6&amp;gt; :call JsBeautify()&amp;lt;cr&amp;gt;
	&amp;quot; or
	autocmd FileType javascript noremap &amp;lt;buffer&amp;gt;  &amp;lt;F6&amp;gt; :call JsBeautify()&amp;lt;cr&amp;gt;
	&amp;quot; for json
	autocmd FileType json noremap &amp;lt;buffer&amp;gt; &amp;lt;F6&amp;gt; :call JsonBeautify()&amp;lt;cr&amp;gt;
	&amp;quot; for jsx
	autocmd FileType jsx noremap &amp;lt;buffer&amp;gt; &amp;lt;F6&amp;gt; :call JsxBeautify()&amp;lt;cr&amp;gt;
	&amp;quot; for html
	autocmd FileType html noremap &amp;lt;buffer&amp;gt; &amp;lt;F6&amp;gt; :call HtmlBeautify()&amp;lt;cr&amp;gt;
	&amp;quot; for css or scss
	autocmd FileType css noremap &amp;lt;buffer&amp;gt; &amp;lt;F6&amp;gt; :call CSSBeautify()&amp;lt;cr&amp;gt;
&amp;quot; }

&amp;quot; easymotion {
    let g:EasyMotion_smartcase = 1
    &amp;quot;let g:EasyMotion_startofline = 0 &amp;quot; keep cursor colum when JK motion
    map &amp;lt;Leader&amp;gt;&amp;lt;leader&amp;gt;h &amp;lt;Plug&amp;gt;(easymotion-linebackward)
    map &amp;lt;Leader&amp;gt;&amp;lt;Leader&amp;gt;j &amp;lt;Plug&amp;gt;(easymotion-j)
    map &amp;lt;Leader&amp;gt;&amp;lt;Leader&amp;gt;k &amp;lt;Plug&amp;gt;(easymotion-k)
    map &amp;lt;Leader&amp;gt;&amp;lt;leader&amp;gt;l &amp;lt;Plug&amp;gt;(easymotion-lineforward)
    &amp;quot; 重复上一次操作, 类似repeat插件, 很强大
    map &amp;lt;Leader&amp;gt;&amp;lt;leader&amp;gt;. &amp;lt;Plug&amp;gt;(easymotion-repeat)
&amp;quot; }

&amp;quot; easyalign {
    vmap &amp;lt;Leader&amp;gt;a &amp;lt;Plug&amp;gt;(EasyAlign)
    nmap &amp;lt;Leader&amp;gt;a &amp;lt;Plug&amp;gt;(EasyAlign)
    if !exists(&#39;g:easy_align_delimiters&#39;)
    let g:easy_align_delimiters = {}
    endif
    let g:easy_align_delimiters[&#39;#&#39;] = { &#39;pattern&#39;: &#39;#&#39;, &#39;ignore_groups&#39;: [&#39;String&#39;] }
&amp;quot; }
&amp;quot; expandregion {
    vmap v &amp;lt;Plug&amp;gt;(expand_region_expand)
    vmap V &amp;lt;Plug&amp;gt;(expand_region_shrink)
&amp;quot; }

&amp;quot; fugitive {
    &amp;quot; :Gdiff  :Gstatus :Gvsplit
    nnoremap &amp;lt;leader&amp;gt;ge :Gdiff&amp;lt;CR&amp;gt;
    &amp;quot; not ready to open
    &amp;quot; &amp;lt;leader&amp;gt;gb maps to :Gblame&amp;lt;CR&amp;gt;
    &amp;quot; &amp;lt;leader&amp;gt;gs maps to :Gstatus&amp;lt;CR&amp;gt;
    &amp;quot; &amp;lt;leader&amp;gt;gd maps to :Gdiff&amp;lt;CR&amp;gt;  和现有冲突
    &amp;quot; &amp;lt;leader&amp;gt;gl maps to :Glog&amp;lt;CR&amp;gt;
    &amp;quot; &amp;lt;leader&amp;gt;gc maps to :Gcommit&amp;lt;CR&amp;gt;
    &amp;quot; &amp;lt;leader&amp;gt;gp maps to :Git push&amp;lt;CR&amp;gt;
&amp;quot; }

&amp;quot; gitgutter {
    &amp;quot; 同git diff,实时展示文件中修改的行
    &amp;quot; 只是不喜欢除了行号多一列, 默认关闭,gs时打开
    let g:gitgutter_map_keys = 0
    let g:gitgutter_enabled = 0
    let g:gitgutter_highlight_lines = 1
    nnoremap &amp;lt;leader&amp;gt;gs :GitGutterToggle&amp;lt;CR&amp;gt;
&amp;quot; }

&amp;quot; nerdtree nerdtreetabs {
    map &amp;lt;Leader&amp;gt;e &amp;lt;plug&amp;gt;NERDTreeTabsToggle&amp;lt;CR&amp;gt;
    let NERDTreeHighlightCursorline = 1
    let NERDTreeIgnore=[ &#39;\.pyc$&#39;, &#39;\.pyo$&#39;, &#39;\.obj$&#39;, &#39;\.o$&#39;, &#39;\.so$&#39;, &#39;\.egg$&#39;, &#39;^\.git$&#39;, &#39;^\.svn$&#39;, &#39;^\.hg$&#39; ]
    &amp;quot; 只有一个窗口的时候默认关闭
    autocmd bufenter * if (winnr(&amp;quot;$&amp;quot;) == 1 &amp;amp;&amp;amp; exists(&amp;quot;b:NERDTreeType&amp;quot;) &amp;amp;&amp;amp; b:NERDTreeType == &amp;quot;primary&amp;quot;) | q | end
    &amp;quot; s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = &#39;s&#39;
    let g:NERDTreeMapOpenVSplit = &#39;v&#39;
    let g:nerdtree_tabs_open_on_gui_startup = 1
    &amp;quot;let g:nerdtree_tabs_open_on_console_startup = 1
    let g:nerdtree_tabs_smart_startup_focus = 2
    let g:nerdtree_tabs_autoclose = 1
&amp;quot; }

&amp;quot; airline {
    if !exists(&#39;g:airline_symbols&#39;)
        let g:airline_symbols = {}
    endif
	let g:airline_theme = &#39;solarized&#39;
    let g:airline_left_sep = &#39;▶&#39;
    let g:airline_left_alt_sep = &#39;❯&#39;
    let g:airline_right_sep = &#39;◀&#39;
    let g:airline_right_alt_sep = &#39;❮&#39;
    let g:airline_symbols.linenr = &#39;¶&#39;
    let g:airline_symbols.branch = &#39;⎇&#39;
    &amp;quot; 是否打开tabline
    let g:airline#extensions#tabline#enabled = 1
&amp;quot; }

&amp;quot; solarized {
    let g:solarized_termtrans=1
    let g:solarized_contrast=&amp;quot;normal&amp;quot;
    let g:solarized_visibility=&amp;quot;normal&amp;quot;
    &amp;quot;let g:solarized_termcolors=256
&amp;quot; }

&amp;quot; TagBar {
    &amp;quot;autocmd VimEnter * TagbarToggle
	if isdirectory(expand(&amp;quot;~/.vim/bundle/tagbar/&amp;quot;))
		nnoremap&amp;lt;leader&amp;gt;] :TagbarToggle&amp;lt;CR&amp;gt;
	endif
&amp;quot; }


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;效果图&#34;&gt;效果图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/large/68faff51gw1f3xfxxzab4j21kw0y2wof.jpg&#34; alt=&#34;vim&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vim小技巧</title>
      <link>http://xiaojiong.net/2015/06/28/vim%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sun, 28 Jun 2015 19:09:55 +0800</pubDate>
      
      <guid>http://xiaojiong.net/2015/06/28/vim%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>

&lt;h3 id=&#34;块操作&#34;&gt;块操作&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;1.如何在一段代码的每一行前插入a?
    &amp;lt;c-v&amp;gt;选中第一行的第一个字符，j-&amp;gt;I-&amp;gt;a&amp;gt;Esc
2.如何在一段代码的每一行尾插入;?
    &amp;lt;c-v&amp;gt;选中第一行的最后一个字符，j-&amp;gt;$-&amp;gt;A-&amp;gt;;-&amp;gt;Esc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;善于用-重复命令&#34;&gt;善于用.重复命令&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;举例：xiaojiong is good man!
    现在光标在is中的i上，要删除is good,dw-&amp;gt;.
    好处是如果只想删除is活着想多删一个单词，直接按u或者.就好了。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;视图模式&#34;&gt;视图模式&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;aaa&amp;lt;/html&amp;gt; 光标在&amp;gt;&amp;lt;符号之间，如何选取&amp;gt;&amp;lt;符号之间的内容。vit
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;去除windows-m&#34;&gt;去除windows ^M&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;:%s/^M$//g 
^M 注意要用 Ctrl + V Ctrl + M 来输入
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;未完待续&#34;&gt;未完待续&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>